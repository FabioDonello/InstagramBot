Index: BOT_Manager.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from instabot import Bot\r\nimport os\r\nimport glob\r\nimport time\r\n\r\nimport datetime\r\nimport MainPage\r\nfrom geopy.geocoders import Nominatim\r\nfrom apscheduler.schedulers.blocking import BlockingScheduler\r\n\r\nimport shutil\r\n\r\n\r\nfile_path = '/Users/fabiodonello/Desktop/Esame OOP/InstgramBot_2/config/log/'\r\nshutil.rmtree(file_path)\r\nbot = Bot()\r\nfile_id = format(id(bot))\r\nx = 0\r\n\r\n\r\ndef ig_login(proxy_list, username, password, var):\r\n    # cookie_del = glob.glob(\"config/*cookie.json\")\r\n    # os.remove(cookie_del[0])\r\n    if var == 1:\r\n        #bot.login(username=username, password=password, is_threaded=True)\r\n        f = open(\"Credenziali\", \"w\")\r\n        f.write(username)\r\n        f.write(\"\\n\")\r\n        f.write(password)\r\n        f.close()\r\n\r\n        print(\"Login riuscito A\")\r\n\r\n    if var == 0:\r\n        f = open(\"Credenziali\", \"r\")\r\n        username = f.readline()\r\n        password = f.readline()\r\n        f.close()\r\n        #bot.login(username=username, password=password, is_threaded=True)\r\n        x = 1\r\n        print(\"Login riuscito B\")\r\n\r\n\r\ndef ig_logout():\r\n    f = open(\"Credenziali\", \"r\")\r\n    username = f.readline()\r\n    f.close()\r\n    f = open(\"Credenziali\", \"w\").close()\r\n    #bot.logout(username=username, is_threaded=True)\r\n    print(\"Logout eseguito\")\r\n\r\n\r\n\r\n# Set follow\r\ndef ig_follow_hashtag(hashtags):\r\n    while x == 0:\r\n        print(\"aspetto il login\")\r\n        time.sleep(2)\r\n\r\n    print(hashtags)\r\n    for hashtag in hashtags:\r\n        users = bot.get_hashtag_users(hashtag)\r\n        print(time.sleep(300))\r\n        for user in users:\r\n            bot.follow(user)\r\n            print(time.sleep(300))\r\n\r\n\r\ndef ig_follow_location(location):\r\n    app = Nominatim(user_agent=\"tutorial\")\r\n    localization = app.geocode(location).raw\r\n\r\n    latitude = localization['lat']\r\n    longitude = localization['lon']\r\n    position = bot.get_locations_from_coordinates(latitude=latitude, longitude=longitude)\r\n\r\n    for positions in position:\r\n        user_position = bot.get_geotag_users(geotag=positions)\r\n        for users in user_position:\r\n            bot.follow_followers(user_id=users)\r\n            time.sleep(240)\r\n\r\n\r\ndef ig_follow_account(accounts):\r\n    while x == 0:\r\n        print(\"aspetto il login\")\r\n        time.sleep(2)\r\n\r\n    print(accounts)\r\n    for account in accounts:\r\n        users = bot.get_user_followers(account)\r\n        print(time.sleep(300))\r\n        for user in users:\r\n            bot.follow(user)\r\n            print(time.sleep(300))\r\n\r\n\r\n\r\n# Set Likes\r\ndef ig_likes_hashtag(hashtags):\r\n    for hashtag in hashtags:\r\n        medias = bot.get_hashtag_medias(hashtag)\r\n        for media in medias:\r\n            bot.like(media)\r\n            time.sleep(30)\r\n\r\n\r\ndef ig_likes_location(location):\r\n    app = Nominatim(user_agent=\"tutorial\")\r\n    localization = app.geocode(location).raw\r\n\r\n    latitude = localization['lat']\r\n    longitude = localization['lon']\r\n    position = bot.get_locations_from_coordinates(latitude=latitude, longitude=longitude)\r\n\r\n    amount = 850\r\n    while amount != 0:\r\n        bot.like_location_feed(place=position, amount=1)\r\n        time.sleep(40)\r\n        amount = amount - 1\r\n\r\n\r\ndef ig_likes_account(accounts):\r\n    for account in accounts:\r\n        bot.like_followers(user_id=account, nlikes=3)\r\n        time.sleep(90)\r\n\r\n\r\n# Set auto-publish\r\n'''def ig_upload_photo():\r\n    print(\"Done\")\r\n    print(datetime.datetime.now())\r\n\r\ndef schedule_upload_photo():\r\n\r\n    scheduler = BlockingScheduler(timezone='Europe/Rome')\r\n    n = 2\r\n    while n != 0:\r\n        scheduler.add_job(ig_upload_photo, 'interval', seconds=20)\r\n         print(datetime.datetime.now())\r\n        n = n - 1\r\n        scheduler.get_jobs()\r\n        time.sleep(10)\r\n\r\nscheduler.start()\r\n'''\r\n=======\r\ndef ig_unfollow(list_value, white_list):\r\n\r\n    f_name = r\"/Users/fabiodonello/Desktop/Esame OOP/InstgramBot_2/config/followed.txt\"\r\n    def file_len(f_name):\r\n        with open(f_name, \"r\") as followed_file:\r\n            for i, l in enumerate(followed_file):\r\n                pass\r\n        return i + 1\r\n    followed_file_len = file_len(f_name)\r\n    print(followed_file_len)\r\n    with open(f_name, \"r\") as followed_file:\r\n        for y in range(followed_file_len):\r\n            user_id = followed_file.readline()\r\n            print(user_id)\r\n            \"\"\"user_info = bot.get_user_info(user_id)            \r\n            time.sleep(3)\r\n            if list_value[0][0] == 1:\r\n                if user_info['giorno in cui mi ha iniziato a seguire'] + list_value[0][1] > \"data odierna\":\r\n                    if user_info['username'] not in white_list:\r\n                        bot.unfollow(user_id)\r\n                        time.sleep(3)\r\n            if list_value[1][0] == 1:\r\n                if user_info['follower'] < list_value[1][1] :\r\n                    if user_info['username'] not in white_list:\r\n                        bot.unfollow(user_id)\r\n                        time.sleep(3)\r\n            if list_value[2][0] == 1:\r\n                if user_info['numero media'] < list_value[2][1] :\r\n                    if user_info['username'] not in white_list:\r\n                        bot.unfollow(user_id)\r\n                        time.sleep(3)\r\n            if list_value[3][0] == 1:\r\n                if (user_info['data ultimo post'] and user_info['data ultimo storia']) < list_value[3][1]:\r\n                    if user_info['username'] not in white_list:\r\n                        bot.unfollow(user_id)\r\n                        time.sleep(3) \"\"\"\r\n\r\n\r\ndef ig_direct(list_value, message):\r\n    # Direct your follower\r\n    if list_value[0][0] == 1:\r\n        f = open(\"Credenziali\", \"r\")\r\n        username = f.readline()\r\n        f.close()\r\n        following = bot.get_user_following(username)\r\n        following_id = bot.convert_to_user_id(following)\r\n        for user in following_id:\r\n            bot.send_message(user, message)\r\n\r\n    # Direct your following\r\n    if list_value[1][0] == 1:\r\n        print(\"sono dentro\")\r\n        f_name = r\"/Users/fabiodonello/Desktop/Esame OOP/InstgramBot_2/config/followed.txt\"\r\n        def file_len(f_name):\r\n            with open(f_name, \"r\") as followed_file:\r\n                for i, l in enumerate(followed_file):\r\n                    pass\r\n            return i + 1\r\n\r\n        followed_file_len = file_len(f_name)\r\n        print(followed_file_len)\r\n        with open(f_name, \"r\") as followed_file:\r\n            for y in range(followed_file_len):\r\n                user_id = followed_file.readline()\r\n                print(user_id)\r\n                bot.send_message(user_id, message)\r\n                time.sleep(3)\r\n\r\n    # Direct your account follower\r\n    if list_value[2][0] == 1:\r\n        for account in list_value[2][1]:\r\n            account_id = bot.convert_to_user_id(account)\r\n            account_followers = bot.get_user_followers(account_id)\r\n            time.sleep(3)\r\n            for account_follower in account_followers:\r\n                bot.send_message(account_follower, message)\r\n                time.sleep(3)\r\n\r\n    # Direct with hashtag\r\n    if list_value[3][0] == 1:\r\n        for hashtag in list_value[3][1]:\r\n            hashtag_users = bot.get_hashtag_users(hashtag)\r\n            time.sleep(3)\r\n            for hashtag_user in hashtag_users:\r\n                bot.send_message(hashtag_user, message)\r\n                time.sleep(3)\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BOT_Manager.py b/BOT_Manager.py
--- a/BOT_Manager.py	
+++ b/BOT_Manager.py	
@@ -144,7 +144,6 @@
 
 scheduler.start()
 '''
-=======
 def ig_unfollow(list_value, white_list):
 
     f_name = r"/Users/fabiodonello/Desktop/Esame OOP/InstgramBot_2/config/followed.txt"
Index: MainPage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\n\r\nif os.path.isfile(\"path/to/config/file.json\"):\r\n    os.remove(\"path/to/config/file.json\")\r\n\r\n\r\nfrom tkinter import *\r\nfrom tkcalendar import *\r\nfrom tkinter import filedialog\r\nfrom threading import Thread\r\nfrom BOT_Manager import *\r\nfrom datetime import date\r\nfrom tkinter import ttk\r\nfrom PIL import ImageTk, Image\r\nfrom instabot import Bot\r\nimport glob\r\nimport argparse\r\nimport sys\r\nimport queue\r\nimport requests\r\nfrom bs4 import BeautifulSoup\r\nfrom tkinter import ttk\r\nfrom threading import Thread\r\nfrom BOT_Manager import *\r\nimport requests\r\nfrom bs4 import BeautifulSoup\r\nfrom tkinter import messagebox\r\nimport re\r\nimport matplotlib\r\nmatplotlib.use(\"TkAgg\")\r\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg\r\nfrom matplotlib.figure import Figure\r\n\r\n\r\nclass MainPage:\r\n\r\n    def __init__(self, root):\r\n        self.root = root\r\n        self.is_login = 0\r\n        self.root.title(\"Instagram Tool\")\r\n        self.root.geometry(\"1200x600\")\r\n        self.root.resizable(False, False)\r\n\r\n        # Create main menu frame\r\n        frame_menu = Frame(self.root, bd=0, bg=\"black\")\r\n        frame_menu.place(x=0, y=0, height=600, width=300)\r\n\r\n        # Dashboard button\r\n        dashboard_button = Button(frame_menu, text=\"Dashboard\", command=\"set\")\r\n        dashboard_button.place(x=0, y=0, height=100, width=300)\r\n\r\n        # Follow button\r\n        follow_button = Button(frame_menu, text=\"Follow\", command=\"set\")\r\n        follow_button.place(x=0, y=100, height=100, width=300)\r\n\r\n        # Unfollow button\r\n        unfollow_button = Button(frame_menu, text=\"Unfollow\", command=\"set\")\r\n        unfollow_button.place(x=0, y=200, height=100, width=300)\r\n\r\n        # Like and dislike button\r\n        l_d_button = Button(frame_menu, text=\"Like\", command=\"set\")\r\n        l_d_button.place(x=0, y=300, height=100, width=300)\r\n\r\n        # Direct button\r\n        direct_button = Button(frame_menu, text=\"Direct\", command=\"set\")\r\n        direct_button.place(x=0, y=400, height=100, width=300)\r\n\r\n        # Auto publish button\r\n        auto_publish_button = Button(frame_menu, text=\"Auto publish\", command=\"set\")\r\n        auto_publish_button.place(x=0, y=500, height=100, width=300)\r\n\r\n        # Frame manege\r\n        auto_publish_frame = Frame(self.root, bd=5, bg=\"white\")\r\n        auto_publish_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n        unfollow_frame = Frame(self.root, bd=5, bg=\"white\")\r\n        unfollow_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n        direct_frame = Frame(self.root, bd=5, bg=\"white\")\r\n        direct_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n        like_dislike_frame = Frame(self.root, bd=5, bg=\"white\")\r\n        like_dislike_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n        follow_frame = Frame(self.root, bd=5, bg=\"white\")\r\n        follow_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n        dashboard_frame = Frame(self.root, bd=5, bg=\"white\")\r\n        dashboard_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n        def auto_publish(event):\r\n\r\n            dashboard_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            follow_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            like_dislike_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            direct_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            unfollow_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            auto_publish_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n            # Set title\r\n            auto_publish_label = Label(auto_publish_frame, text=\"Auto-publish\", bg=\"steelblue\", fg=\"white\")\r\n            auto_publish_label.place(x=0, y=0, height=50, width=200)\r\n\r\n            # Set auto-publish\r\n            save_button = Button(auto_publish_frame, text=\"Save\", command=\"set\")\r\n            save_button.place(x=350, y=0, height=50, width=100)\r\n\r\n            # Set calendar\r\n\r\n            cal = Calendar(auto_publish_frame, setmode='day', date_pattern='dd-mm-yyyy', mindate=date.today(),\r\n                           background=\"steelblue\", headersbackground=\"lightsteelblue\", headersforeground=\"whitesmoke\")\r\n\r\n            cal.place(x=0, y=100, height=150, width=300)\r\n\r\n            # Select datetime button\r\n\r\n            def select_date():\r\n                my_date = cal.get_date()\r\n                selected_date = Label(auto_publish_frame, text=my_date)\r\n                selected_date.place(x=550, y=100, height=50, width=100)\r\n                return my_date\r\n\r\n            select_date_button = Button(auto_publish_frame, text=\"Select date\", command=select_date)\r\n            select_date_button.place(x=350, y=100, height=50, width=100)\r\n\r\n            # Set time button\r\n\r\n            hours = list(range(1, 25))\r\n            minutes = list(range(00, 60))\r\n\r\n            var_hours = StringVar(auto_publish_frame)\r\n            var_hours.set(hours[0])\r\n\r\n            var_minutes = StringVar(auto_publish_frame)\r\n            var_minutes.set(minutes[0])\r\n\r\n            hours_menu = OptionMenu(auto_publish_frame, var_hours, *hours)\r\n            hours_menu.place(x=450, y=175, width=50)\r\n\r\n            minutes_menu = OptionMenu(auto_publish_frame, var_minutes, *minutes)\r\n            minutes_menu.place(x=500, y=175, width=50)\r\n\r\n            def select_time():\r\n                selected_time = Label(auto_publish_frame, text=\" \" + var_hours.get() + \" : \" + var_minutes.get())\r\n                selected_time.place(x=550, y=165, height=50, width=100)\r\n\r\n            select_time_button = Button(auto_publish_frame, text=\"Select time\", command=select_time)\r\n            select_time_button.place(x=350, y=165, height=50, width=100)\r\n\r\n            # Set view files selected\r\n\r\n            table = ttk.Treeview(auto_publish_frame)\r\n            table.place(x=0, y=285, height=150, width=450)\r\n            table_scroll = ttk.Scrollbar(auto_publish_frame, orient=\"vertical\", command=table.yview)\r\n            table_scroll.place(x=450, y=285, height=150)\r\n            table.configure(yscrollcommand=table_scroll.set)\r\n\r\n            table['columns'] = ('File', 'Date', 'Time', 'View', 'Delete')\r\n\r\n            table.column('#0', width=0, stretch=False)\r\n            table.column(\"File\", anchor=CENTER, width=200)\r\n            table.column(\"Date\", anchor=CENTER, width=70)\r\n            table.column(\"Time\", anchor=CENTER, width=70)\r\n            table.column(\"View\", anchor=CENTER, width=50)\r\n            table.column(\"Delete\", anchor=CENTER, width=50)\r\n\r\n            table.heading(\"#0\", text=\"\", anchor=CENTER)\r\n            table.heading(\"File\", text=\"File\", anchor=CENTER)\r\n            table.heading(\"Date\", text=\"Date\", anchor=CENTER)\r\n            table.heading(\"Time\", text=\"Time\", anchor=CENTER)\r\n            table.heading(\"View\", text=\"View\", anchor=CENTER)\r\n            table.heading(\"Delete\", text=\"Delete\", anchor=CENTER)\r\n\r\n            # Set Enter the caption\r\n            caption_label = Label(auto_publish_frame, text=\"Enter the caption\", bg=\"whitesmoke\")\r\n            caption_label.place(x=500, y=285, height=50, width=100)\r\n\r\n            caption_frame = Frame(auto_publish_frame, bd=5, bg=\"silver\")\r\n            caption_frame.place(x=500, y=325, height=110, width=300)\r\n            caption_frame.grid_columnconfigure(0, weight=1)\r\n            caption_frame.grid_rowconfigure(0, weight=1)\r\n\r\n            caption_text = Text(caption_frame, height=10)\r\n            caption_text.grid(row=0, column=0, sticky=\"ew\")\r\n\r\n            caption_scroll = Scrollbar(caption_frame, orient=\"vertical\", command=caption_text.yview)\r\n            caption_scroll.grid(row=0, column=1, sticky=\"ns\")\r\n\r\n            caption_text['yscrollcommand'] = caption_scroll.set\r\n\r\n            # Set Choose file button\r\n\r\n            def choose_file():\r\n                auto_publish_frame.filename = filedialog.askopenfilename(initialdir=\"/desktop\", title=\"Select a file\",\r\n                                                                         filetypes=(\r\n                                                                             (\"all files\", \"*.*\"),\r\n                                                                             (\"jpg files\", \"*.jpg\"),\r\n                                                                             (\"jpeg files\", \"*.jpeg\"),\r\n                                                                             (\"gif files\", \"*.gif\"),\r\n                                                                             (\"png files\", \"*.png\"),\r\n                                                                             (\"mp4 files\", \"*.mp4\"),\r\n                                                                             (\"wmv files\", \"*.wmv\"),\r\n                                                                             (\"mkv files\", \"*.mkv\"),\r\n                                                                             (\"webm files\", \"*.webm\")))\r\n                name_file = os.path.basename(auto_publish_frame.filename)\r\n                print(name_file)\r\n                table.insert(parent='', index='end', iid=0, text=\"ciao\",\r\n                             values=(name_file, \"21-12-2021\", \"12:20\", \"edd\", \"wee\"))\r\n\r\n            choose_file_button = Button(auto_publish_frame, text=\"Choose file\", command=choose_file, bg=\"whitesmoke\")\r\n            choose_file_button.place(x=230, y=0, height=50, width=100)\r\n\r\n            # Set check button for upload photo/video/story\r\n            upload_photo_check = IntVar()\r\n            upload_video_check = IntVar()\r\n            upload_story_check = IntVar()\r\n\r\n            def upload_photo_button():\r\n                if upload_photo_check.get() == 1:\r\n                    upload_photo_check_button[\"bg\"] = \"green\"\r\n                if upload_photo_check.get() == 0:\r\n                    upload_photo_check_button[\"bg\"] = \"steelblue\"\r\n\r\n            def upload_video_button():\r\n                if upload_video_check.get() == 1:\r\n                    upload_video_check_button[\"bg\"] = \"green\"\r\n                if upload_video_check.get() == 0:\r\n                    upload_video_check_button[\"bg\"] = \"steelblue\"\r\n\r\n            def upload_story_button():\r\n                if upload_story_check.get() == 1:\r\n                    upload_story_check_button[\"bg\"] = \"green\"\r\n                if upload_story_check.get() == 0:\r\n                    upload_story_check_button[\"bg\"] = \"steelblue\"\r\n\r\n            upload_photo_check_button = Checkbutton(auto_publish_frame, text=\"Upload photo\", bg=\"steelblue\", fg=\"white\",\r\n                                                    variable=upload_photo_check, command=upload_photo_button)\r\n            upload_photo_check_button.place(x=50, y=500, height=50, width=150)\r\n\r\n            upload_video_check_button = Checkbutton(auto_publish_frame, text=\"Upload video\", bg=\"steelblue\", fg=\"white\",\r\n                                                    variable=upload_video_check, command=upload_video_button)\r\n            upload_video_check_button.place(x=300, y=500, height=50, width=150)\r\n\r\n            upload_story_check_button = Checkbutton(auto_publish_frame, text=\"Upload story\", bg=\"steelblue\", fg=\"white\",\r\n                                                    variable=upload_story_check, command=upload_story_button)\r\n            upload_story_check_button.place(x=550, y=500, height=50, width=150)\r\n\r\n        def unfollow(event):\r\n            dashboard_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            follow_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            like_dislike_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            direct_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            unfollow_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n            auto_publish_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            # Set titles\r\n\r\n            follow_label = Label(unfollow_frame, text=\"Unfollow\", bg=\"grey\", fg=\"white\")\r\n            follow_label.place(x=0, y=0, height=50, width=100)\r\n\r\n            # Start unfollower bot\r\n\r\n            start_un_follower_bot_button = Button(unfollow_frame, text=\"Start\", command=\"set\")\r\n            start_un_follower_bot_button.place(x=100, y=0, height=50, width=100)\r\n\r\n            # Save unfollower options button\r\n\r\n            save_un_follower_option_button = Button(unfollow_frame, text=\"Save\", command=\"set\")\r\n            save_un_follower_option_button.place(x=200, y=0, height=50, width=100)\r\n\r\n            # Options label\r\n            un_follow_label = Label(unfollow_frame, text=\"Unfollow target:\", bg=\"grey\", fg=\"white\")\r\n            un_follow_label.place(x=0, y=75, width=900)\r\n            un_follow_label = Label(unfollow_frame, text=\"Unfollow white list:\", bg=\"grey\", fg=\"white\")\r\n            un_follow_label.place(x=0, y=225, width=900)\r\n\r\n            replacemant_check_var = IntVar()\r\n            account_follower_check_var = IntVar()\r\n            account_media_check_var = IntVar()\r\n            account_activity_check_var = IntVar()\r\n\r\n            def tick_manage1():\r\n                un_follow_by_media_number_check_button.deselect()\r\n                un_follow_by_activity_check_button.deselect()\r\n                un_follow_by_follower_number_check_button.deselect()\r\n\r\n            def tick_manage2():\r\n                un_follow_after_replacement_check_button.deselect()\r\n                un_follow_by_media_number_check_button.deselect()\r\n                un_follow_by_activity_check_button.deselect()\r\n\r\n            def tick_manage3():\r\n                un_follow_after_replacement_check_button.deselect()\r\n                un_follow_by_follower_number_check_button.deselect()\r\n                un_follow_by_activity_check_button.deselect()\r\n\r\n            def tick_manage4():\r\n                un_follow_after_replacement_check_button.deselect()\r\n                un_follow_by_follower_number_check_button.deselect()\r\n                un_follow_by_media_number_check_button.deselect()\r\n\r\n            un_follow_after_replacement_check_button = Checkbutton(unfollow_frame, text=\"Unfollow by replacemant:\",\r\n                                                                   bg=\"white\",\r\n                                                                   variable=replacemant_check_var,\r\n                                                                   command=tick_manage1)\r\n            un_follow_after_replacement_check_button.place(x=25, y=125)\r\n\r\n            un_follow_by_follower_number_check_button = Checkbutton(unfollow_frame, text=\"Unfollow by account\"\r\n                                                                                         \" follower:\",\r\n                                                                    bg=\"white\",\r\n                                                                    variable=account_follower_check_var,\r\n                                                                    command=tick_manage2)\r\n            un_follow_by_follower_number_check_button.place(x=25, y=175)\r\n\r\n            un_follow_by_media_number_check_button = Checkbutton(unfollow_frame, text=\"Unfollow by account\"\r\n                                                                                      \" media:\",\r\n                                                                 bg=\"white\",\r\n                                                                 variable=account_media_check_var,\r\n                                                                 command=tick_manage3)\r\n            un_follow_by_media_number_check_button.place(x=575, y=125)\r\n\r\n            un_follow_by_activity_check_button = Checkbutton(unfollow_frame, text=\"Unfollow by account\"\r\n                                                                                  \" activity:\",\r\n                                                             bg=\"white\",\r\n                                                             variable=account_activity_check_var,\r\n                                                             command=tick_manage4)\r\n            un_follow_by_activity_check_button.place(x=575, y=175)\r\n\r\n            # ------------------------------------------------------------------------------------------------\r\n            replacemant_time = [\r\n                \"\",\r\n                \"1 day\",\r\n                \"3 day\",\r\n                \"5 day\",\r\n                \"10 day\",\r\n                \"20 day\",\r\n                \"30 day\",\r\n                \"70 day\",\r\n                \"120 day\",\r\n            ]  # etc\r\n\r\n            replacemant_time_var = StringVar(unfollow_frame)\r\n            replacemant_time_var.set(replacemant_time[0])  # default value\r\n\r\n            replacemant_option_menu = OptionMenu(unfollow_frame, replacemant_time_var, *replacemant_time)\r\n            replacemant_option_menu.place(x=210, y=125)\r\n\r\n            # ------------------------------------------------------------------------------------------------\r\n            follow_number = [\r\n                \"\",\r\n                \"< 50 followers\",\r\n                \"< 100 followers\",\r\n                \"< 150 followers\",\r\n                \"< 200 followers\",\r\n                \"< 400 followers\",\r\n                \"< 800 followers\",\r\n                \"< 1200 followers\",\r\n                \"< 2000 followers\",\r\n            ]  # etc\r\n\r\n            follow_number_var = StringVar(unfollow_frame)\r\n            follow_number_var.set(follow_number[0])  # default value\r\n\r\n            follow_number_option_menu = OptionMenu(unfollow_frame, follow_number_var, *follow_number)\r\n            follow_number_option_menu.place(x=230, y=175)\r\n\r\n            # ------------------------------------------------------------------------------------------------\r\n            media_number = [\r\n                \"\",\r\n                \"< 10 media\",\r\n                \"< 20 media\",\r\n                \"< 30 media\",\r\n                \"< 40 media\",\r\n                \"< 50 media\",\r\n                \"< 60 media\",\r\n                \"< 70 media\",\r\n                \"< 80 media\",\r\n            ]  # etc\r\n\r\n            media_number_var = StringVar(unfollow_frame)\r\n            media_number_var.set(media_number[0])  # default value\r\n\r\n            media_number_option_menu = OptionMenu(unfollow_frame, media_number_var, *media_number)\r\n            media_number_option_menu.place(x=770, y=125)\r\n\r\n            # ------------------------------------------------------------------------------------------------\r\n            activity_time = [\r\n                \"\",\r\n                \"1 day\",\r\n                \"3 day\",\r\n                \"5 day\",\r\n                \"10 day\",\r\n                \"20 day\",\r\n                \"30 day\",\r\n                \"70 day\",\r\n                \"120 day\",\r\n            ]  # etc\r\n\r\n            activity_time_var = StringVar(unfollow_frame)\r\n            activity_time_var.set(activity_time[0])  # default value\r\n\r\n            activity_time_option_menu = OptionMenu(unfollow_frame, activity_time_var, *activity_time)\r\n            activity_time_option_menu.place(x=780, y=175)\r\n\r\n            # White list\r\n            un_follow_white_list_frame = Frame(unfollow_frame, bd=5, bg=\"grey\")\r\n            un_follow_white_list_frame.place(x=100, y=275, height=100, width=700)\r\n\r\n            # apply the grid layout\r\n            un_follow_white_list_frame.grid_columnconfigure(0, weight=1)\r\n            un_follow_white_list_frame.grid_rowconfigure(0, weight=1)\r\n\r\n            # create the text widget\r\n            white_list_text = Text(un_follow_white_list_frame, height=10)\r\n            white_list_text.grid(row=0, column=0, sticky='ew')\r\n\r\n            # create a scrollbar widget and set its command to the text widget\r\n            white_list_scrollbar = Scrollbar(un_follow_white_list_frame, orient='vertical',\r\n                                             command=white_list_text.yview)\r\n            white_list_scrollbar.grid(row=0, column=1, sticky='ns')\r\n\r\n            #  communicate back to the scrollbar\r\n            white_list_text['yscrollcommand'] = white_list_scrollbar.set\r\n\r\n            def start_unfollow_bot(event):\r\n                replacemant_value = re.findall(\"\\d+\", replacemant_time_var.get())\r\n                follow_number_value = re.findall(\"\\d+\", follow_number_var.get())\r\n                media_number_value = re.findall(\"\\d+\", media_number_var.get())\r\n                activity_time_value = re.findall(\"\\d+\", activity_time_var.get())\r\n                white_list_value = white_list_text\r\n                a1 = [0, replacemant_value]\r\n                a2 = [0, follow_number_value]\r\n                a3 = [0, media_number_value]\r\n                a4 = [0, activity_time_value]\r\n                if replacemant_check_var.get() == 1:\r\n                    a1[0] = 1\r\n                if account_follower_check_var.get() == 1:\r\n                    a2[0] = 1\r\n                if account_media_check_var.get() == 1:\r\n                    a3[0] = 1\r\n                if account_media_check_var.get() == 1:\r\n                    a4[0] = 1\r\n                tuple_value = (a1, a2, a3, a4)\r\n                print(tuple_value)\r\n                t_unfollow = Thread(target=ig_unfollow, args=(tuple_value, white_list_value))\r\n                t_unfollow.start()\r\n            start_un_follower_bot_button.bind(\"<Button-1>\", start_unfollow_bot)\r\n\r\n        def direct(event):\r\n            dashboard_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            follow_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            like_dislike_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            direct_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n            unfollow_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            auto_publish_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            # Set titles\r\n\r\n            direct_title_label = Label(direct_frame, text=\"Direct\", bg=\"grey\", fg=\"white\")\r\n            direct_title_label.place(x=0, y=0, height=50, width=100)\r\n\r\n            # Start direct bot\r\n\r\n            start_direct_bot_button = Button(direct_frame, text=\"Start\", command=\"set\")\r\n            start_direct_bot_button.place(x=100, y=0, height=50, width=100)\r\n\r\n            # Save direct options button\r\n\r\n            save_direct_option_button = Button(direct_frame, text=\"Save\", command=\"set\")\r\n            save_direct_option_button.place(x=200, y=0, height=50, width=100)\r\n\r\n            # Options label\r\n            direct_target_label = Label(direct_frame, text=\"Direct target:\", bg=\"grey\", fg=\"white\")\r\n            direct_target_label.place(x=0, y=75, width=900)\r\n            direct_message_label = Label(direct_frame, text=\"Direct message:\", bg=\"grey\", fg=\"white\")\r\n            direct_message_label.place(x=0, y=325, width=900)\r\n\r\n            follower_check_var = IntVar()\r\n            following_check_var = IntVar()\r\n            account_follower_check_var = IntVar()\r\n            account_hashtag_check_var = IntVar()\r\n\r\n            def tick_manage1():\r\n                direct_following_check_button.deselect()\r\n                direct_account_follower_check_button.deselect()\r\n                direct_account_hashtag_check_button.deselect()\r\n\r\n            def tick_manage2():\r\n                direct_follower_check_button.deselect()\r\n                direct_account_follower_check_button.deselect()\r\n                direct_account_hashtag_check_button.deselect()\r\n\r\n            def tick_manage3():\r\n                direct_follower_check_button.deselect()\r\n                direct_following_check_button.deselect()\r\n                direct_account_hashtag_check_button.deselect()\r\n\r\n            def tick_manage4():\r\n                direct_follower_check_button.deselect()\r\n                direct_following_check_button.deselect()\r\n                direct_account_follower_check_button.deselect()\r\n\r\n            direct_follower_check_button = Checkbutton(direct_frame, text=\"Direct your follower\",\r\n                                                       bg=\"white\",\r\n                                                       variable=follower_check_var,\r\n                                                       command=tick_manage1)\r\n            direct_follower_check_button.place(x=25, y=125)\r\n\r\n            direct_following_check_button = Checkbutton(direct_frame, text=\"Direct your following\",\r\n                                                        bg=\"white\",\r\n                                                        variable=following_check_var,\r\n                                                        command=tick_manage2)\r\n            direct_following_check_button.place(x=575, y=125)\r\n\r\n            direct_account_follower_check_button = Checkbutton(direct_frame, text=\"Direct an account follower:\",\r\n                                                               bg=\"white\",\r\n                                                               variable=account_follower_check_var,\r\n                                                               command=tick_manage3)\r\n            direct_account_follower_check_button.place(x=25, y=175)\r\n\r\n            direct_account_hashtag_check_button = Checkbutton(direct_frame, text=\"Direct an account hashtag:\",\r\n                                                              bg=\"white\",\r\n                                                              variable=account_hashtag_check_var,\r\n                                                              command=tick_manage4)\r\n            direct_account_hashtag_check_button.place(x=575, y=175)\r\n\r\n            # ---------------------------------------------------------------------------------------------------------\r\n            # Account text box\r\n            direct_account_frame = Frame(direct_frame, bd=5, bg=\"grey\")\r\n            direct_account_frame.place(x=25, y=200, height=100, width=250)\r\n\r\n            # apply the grid layout\r\n            direct_account_frame.grid_columnconfigure(0, weight=1)\r\n            direct_account_frame.grid_rowconfigure(0, weight=1)\r\n\r\n            # create the text widget\r\n            account_text = Text(direct_account_frame, height=10)\r\n            account_text.grid(row=0, column=0, sticky='ew')\r\n\r\n            # create a scrollbar widget and set its command to the text widget\r\n            direct_account_scrollbar = Scrollbar(direct_account_frame, orient='vertical',\r\n                                                 command=account_text.yview)\r\n            direct_account_scrollbar.grid(row=0, column=1, sticky='ns')\r\n\r\n            #  communicate back to the scrollbar\r\n            account_text['yscrollcommand'] = direct_account_scrollbar.set\r\n\r\n            # ---------------------------------------------------------------------------------------------------------\r\n            # Account text box\r\n            direct_hashtag_frame = Frame(direct_frame, bd=5, bg=\"grey\")\r\n            direct_hashtag_frame.place(x=575, y=200, height=100, width=250)\r\n\r\n            # apply the grid layout\r\n            direct_hashtag_frame.grid_columnconfigure(0, weight=1)\r\n            direct_hashtag_frame.grid_rowconfigure(0, weight=1)\r\n\r\n            # create the text widget\r\n            hashtag_text = Text(direct_hashtag_frame, height=10)\r\n            hashtag_text.grid(row=0, column=0, sticky='ew')\r\n\r\n            # create a scrollbar widget and set its command to the text widget\r\n            direct_hashtag_scrollbar = Scrollbar(direct_hashtag_frame, orient='vertical',\r\n                                                 command=account_text.yview)\r\n            direct_hashtag_scrollbar.grid(row=0, column=1, sticky='ns')\r\n\r\n            #  communicate back to the scrollbar\r\n            hashtag_text['yscrollcommand'] = direct_hashtag_scrollbar.set\r\n\r\n            # ---------------------------------------------------------------------------------------------------------\r\n            # Message box\r\n            direct_message_frame = Frame(direct_frame, bd=5, bg=\"grey\")\r\n            direct_message_frame.place(x=100, y=375, height=100, width=700)\r\n\r\n            # apply the grid layout\r\n            direct_message_frame.grid_columnconfigure(0, weight=1)\r\n            direct_message_frame.grid_rowconfigure(0, weight=1)\r\n\r\n            # create the text widget\r\n            message_text = Text(direct_message_frame, height=10)\r\n            message_text.grid(row=0, column=0, sticky='ew')\r\n\r\n            # create a scrollbar widget and set its command to the text widget\r\n            message_scrollbar = Scrollbar(direct_message_frame, orient='vertical',\r\n                                          command=message_text.yview)\r\n            message_scrollbar.grid(row=0, column=1, sticky='ns')\r\n\r\n            #  communicate back to the scrollbar\r\n            message_text['yscrollcommand'] = message_scrollbar.set\r\n\r\n            def start_direct_bot(event):\r\n                account_follower_value = account_text.get(1.0, \"end-1c\")\r\n                account_follower_value = account_follower_value.split(' ')\r\n                account_hashtag_value = hashtag_text.get(1.0, \"end-1c\")\r\n                account_hashtag_value = account_hashtag_value.split(' ')\r\n                direct_message_value = message_text\r\n                a1 = [0]\r\n                a2 = [0]\r\n                a3 = [0, account_follower_value]\r\n                a4 = [0, account_hashtag_value]\r\n                if follower_check_var.get() == 1:\r\n                    a1[0] = 1\r\n                if following_check_var.get() == 1:\r\n                    a2[0] = 1\r\n                if account_follower_check_var.get() == 1:\r\n                    a3[0] = 1\r\n                if account_hashtag_check_var.get() == 1:\r\n                    a4[0] = 1\r\n                tuple_value = (a1, a2, a3, a4)\r\n                print(tuple_value)\r\n                t_direct = Thread(target=ig_direct, args=(tuple_value, direct_message_value))\r\n                t_direct.start()\r\n\r\n            start_direct_bot_button.bind(\"<Button-1>\", start_direct_bot)\r\n\r\n        def like_dislike(event):\r\n\r\n            dashboard_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            follow_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            like_dislike_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n            direct_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            unfollow_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            auto_publish_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            # Set Titles\r\n            likes_label = Label(like_dislike_frame, text=\"Like\", bg=\"steelblue\", fg=\"white\")\r\n            likes_label.place(x=0, y=0, height=50, width=100)\r\n\r\n            # Start likes bot\r\n            start_likes_bot_button = Button(like_dislike_frame, text=\"Start\", command=\"set\")\r\n            start_likes_bot_button.place(x=100, y=0, height=50, width=100)\r\n\r\n            # Save likes option button\r\n            save_likes_options_button = Button(like_dislike_frame, text=\"Save\", command=\"set\")\r\n            save_likes_options_button.place(x=200, y=0, height=50, width=100)\r\n\r\n            hashtag = IntVar()\r\n            location_check = IntVar()\r\n            account = IntVar()\r\n\r\n            def hashtag_button():\r\n                if hashtag.get() == 1:\r\n                    hashtag_check_button[\"bg\"] = \"green\"\r\n                if hashtag.get() == 0:\r\n                    hashtag_check_button[\"bg\"] = \"steelblue\"\r\n\r\n            def location_button():\r\n                if location_check.get() == 1:\r\n                    location_check_button[\"bg\"] = \"green\"\r\n                if location_check.get() == 0:\r\n                    location_check_button[\"bg\"] = \"steelblue\"\r\n\r\n            def account_button():\r\n                if account.get() == 1:\r\n                    account_check_button[\"bg\"] = \"green\"\r\n                if account.get() == 0:\r\n                    account_check_button[\"bg\"] = \"steelblue\"\r\n\r\n            hashtag_check_button = Checkbutton(like_dislike_frame, text=\"Likes by hashtag\", bg=\"steelblue\",\r\n                                               variable=hashtag, command=hashtag_button)\r\n            hashtag_check_button.place(x=10, y=75, width=900)\r\n\r\n            location_check_button = Checkbutton(like_dislike_frame, text=\"Likes by location\", bg=\"steelblue\",\r\n                                                variable=location_check, command=location_button)\r\n            location_check_button.place(x=10, y=275, width=900)\r\n\r\n            account_check_button = Checkbutton(like_dislike_frame, text=\"Likes by account\", bg=\"steelblue\",\r\n                                               variable=account, command=account_button)\r\n            account_check_button.place(x=10, y=400, width=900)\r\n\r\n            # Set likes by hashtag\r\n            hashtag_likes_label = Label(like_dislike_frame, text=\"Enter hashtag\", bg=\"whitesmoke\")\r\n            hashtag_likes_label.place(x=20, y=100, height=50, width=100)\r\n\r\n            hashtag_likes_frame = Frame(like_dislike_frame, bd=5, bg=\"silver\")\r\n            hashtag_likes_frame.place(x=20, y=140, height=100, width=700)\r\n\r\n            hashtag_likes_frame.grid_columnconfigure(0, weight=1)\r\n            hashtag_likes_frame.grid_rowconfigure(0, weight=1)\r\n\r\n            hashtag_text = Text(hashtag_likes_frame, height=10)\r\n            hashtag_text.grid(row=0, column=0, sticky=\"ew\")\r\n\r\n            # Create a scrollbar for the hashtag text\r\n            hashtag_scrollbar = Scrollbar(hashtag_likes_frame, orient=\"vertical\", command=hashtag_text.yview)\r\n            hashtag_scrollbar.grid(row=0, column=1, sticky=\"ns\")\r\n\r\n            hashtag_text['yscrollcommand'] = hashtag_scrollbar.set\r\n\r\n            # Set likes by account\r\n            account_likes_label = Label(like_dislike_frame, text=\"Enter account\")\r\n            account_likes_label.place(x=20, y=425, height=50, width=100)\r\n\r\n            account_likes_frame = Frame(like_dislike_frame, bd=5, bg=\"silver\")\r\n            account_likes_frame.place(x=20, y=465, height=100, width=700)\r\n\r\n            account_likes_frame.grid_columnconfigure(0, weight=1)\r\n            account_likes_frame.grid_rowconfigure(0, weight=1)\r\n\r\n            account_text = Text(account_likes_frame, height=10)\r\n            account_text.grid(row=0, column=0, sticky=\"ew\")\r\n\r\n            # Create a scrollbar for the account text\r\n            account_scrollbar = Scrollbar(account_likes_frame, orient=\"vertical\", command=account_text.yview)\r\n            account_scrollbar.grid(row=0, column=1, sticky=\"ns\")\r\n\r\n            account_text['yscrollcommand'] = account_scrollbar.set\r\n\r\n            # Set likes by location\r\n            location_likes_label = Label(like_dislike_frame, text=\"Enter the position you prefer\")\r\n            location_likes_label.place(x=20, y=300, height=50, width=200)\r\n\r\n            location_likes_frame = Frame(like_dislike_frame, bd=5, bg=\"silver\")\r\n            location_likes_frame.place(x=20, y=345, height=50, width=700)\r\n\r\n            location_likes_frame.grid_columnconfigure(0, weight=1)\r\n            location_likes_frame.grid_rowconfigure(0, weight=1)\r\n\r\n            location_text = Text(location_likes_frame, height=10)\r\n            location_text.grid(row=0, column=0, sticky=\"ew\")\r\n\r\n\r\n            location_scrollbar = Scrollbar(location_likes_frame, orient=\"vertical\", command=location_text.yview)\r\n            location_scrollbar.grid(row=0, column=1, sticky=\"ns\")\r\n\r\n            location_text['yscrollcommand'] = location_scrollbar.set\r\n\r\n\r\n        def follow(event):\r\n\r\n            dashboard_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            follow_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n            like_dislike_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            direct_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            unfollow_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            auto_publish_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            # Set titles\r\n\r\n            follow_label = Label(follow_frame, text=\"Follow\", bg=\"grey\", fg=\"white\")\r\n            follow_label.place(x=0, y=0, height=50, width=100)\r\n\r\n            # set options\r\n\r\n            # Start follower bot\r\n\r\n            start_follower_bot_button = Button(follow_frame, text=\"Start\", command=\"set\")\r\n            start_follower_bot_button.place(x=100, y=0, height=50, width=100)\r\n\r\n            # Save follower options button\r\n\r\n            save_follower_option_button = Button(follow_frame, text=\"Save\", command=\"set\")\r\n            save_follower_option_button.place(x=200, y=0, height=50, width=100)\r\n\r\n            hashtag_check_var = IntVar()\r\n            location_check_var = IntVar()\r\n            account_check_var = IntVar()\r\n\r\n            def hashtag_options():\r\n                if hashtag_check_var.get() == 1:\r\n                    follow_by_hashtag_check_button[\"bg\"] = \"green\"\r\n                if hashtag_check_var.get() == 0:\r\n                    follow_by_hashtag_check_button[\"bg\"] = \"grey\"\r\n\r\n            def location_option():\r\n                if location_check_var.get() == 1:\r\n                    follow_by_location_check_button[\"bg\"] = \"green\"\r\n                if location_check_var.get() == 0:\r\n                    follow_by_location_check_button[\"bg\"] = \"grey\"\r\n\r\n            def account_options():\r\n                if account_check_var.get() == 1:\r\n                    follow_by_account_check_button[\"bg\"] = \"green\"\r\n                if account_check_var.get() == 0:\r\n                    follow_by_account_check_button[\"bg\"] = \"grey\"\r\n\r\n            follow_by_hashtag_check_button = Checkbutton(follow_frame, text=\"Follow by hashtag:\", bg=\"grey\",\r\n                                                         variable=hashtag_check_var, command=hashtag_options)\r\n            follow_by_hashtag_check_button.place(x=10, y=75, width=900)\r\n\r\n            follow_by_location_check_button = Checkbutton(follow_frame, text=\"Follow by location:\", bg=\"grey\",\r\n                                                          variable=location_check_var, command=location_option)\r\n            follow_by_location_check_button.place(x=10, y=275, width=900)\r\n\r\n            follow_by_account_check_button = Checkbutton(follow_frame, text=\"Follow by account:\", bg=\"grey\",\r\n                                                         variable=account_check_var, command=account_options)\r\n            follow_by_account_check_button.place(x=10, y=400, width=900)\r\n\r\n            # Follow by hashtag options\r\n\r\n            hashtag_follow_label = Label(follow_frame, text=\"Insert hashtag:\")\r\n            hashtag_follow_label.place(x=20, y=100, height=50, width=100)\r\n\r\n            hashtag_follow_frame = Frame(follow_frame, bd=5, bg=\"grey\")\r\n            hashtag_follow_frame.place(x=20, y=140, height=100, width=700)\r\n\r\n            # apply the grid layout\r\n            hashtag_follow_frame.grid_columnconfigure(0, weight=1)\r\n            hashtag_follow_frame.grid_rowconfigure(0, weight=1)\r\n\r\n            # create the text widget\r\n            text = Text(hashtag_follow_frame, height=10)\r\n            text.grid(row=0, column=0, sticky='ew')\r\n\r\n            # create a scrollbar widget and set its command to the text widget\r\n            scrollbar = Scrollbar(hashtag_follow_frame, orient='vertical', command=text.yview)\r\n            scrollbar.grid(row=0, column=1, sticky='ns')\r\n\r\n            #  communicate back to the scrollbar\r\n            text['yscrollcommand'] = scrollbar.set\r\n\r\n            # Follow by location option\r\n\r\n            country_check_var = IntVar()\r\n            region_check_var = IntVar()\r\n            city_check_var = IntVar()\r\n\r\n            def country_options():\r\n                if country_check_var.get() == 1:\r\n                    location_country_follow_check_button[\"bg\"] = \"green\"\r\n                if country_check_var.get() == 0:\r\n                    location_country_follow_check_button[\"bg\"] = \"grey\"\r\n\r\n            def region_option():\r\n                if region_check_var.get() == 1:\r\n                    location_region_follow_check_button[\"bg\"] = \"green\"\r\n                if region_check_var.get() == 0:\r\n                    location_region_follow_check_button[\"bg\"] = \"grey\"\r\n\r\n            def city_options():\r\n                if city_check_var.get() == 1:\r\n                    location_city_follow_check_button[\"bg\"] = \"green\"\r\n                if city_check_var.get() == 0:\r\n                    location_city_follow_check_button[\"bg\"] = \"grey\"\r\n\r\n            location_country_follow_check_button = Checkbutton(follow_frame, text=\"Follow by country:\", bg=\"grey\",\r\n                                                               variable=country_check_var, command=country_options)\r\n            location_country_follow_check_button.place(x=70, y=330, width=175)\r\n\r\n            country = [\r\n                \"-------\",\r\n                \"Albania\",\r\n                \"Andorra\",\r\n                \"Armenia\",\r\n                \"Austria\",\r\n                \"Azerbaigian\",\r\n                \"Bielorussia\",\r\n                \"Belgio\",\r\n                \"Bosnia\",\r\n                \"Cipro\",\r\n                \"Croazia\",\r\n                \"Danimarca\",\r\n                \"Estonia\",\r\n                \"Francia\",\r\n                \"Georgia\",\r\n                \"Germania\",\r\n                \"Grecia\",\r\n                \"Italia\",\r\n                \"Irlanda\",\r\n                \"Islanda\",\r\n                \"Lettonia\",\r\n                \"Liechtenstein\",\r\n                \"Lituania\",\r\n                \"Lussemburgo\",\r\n                \"Malta\",\r\n                \"Moldavia\",\r\n                \"Monaco\",\r\n                \"Montenegro\",\r\n                \"Norvegia\",\r\n                \"Paesi Bassi\",\r\n                \"Polonia\",\r\n                \"Portogallo\",\r\n                \"Regno Unito\",\r\n                \"Repubblica ceca\",\r\n                \"Romania\",\r\n                \"Russia\",\r\n                \"San Marino\",\r\n                \"Serbia\",\r\n                \"Slovacchia\",\r\n                \"Slovenia\",\r\n                \"Spagna\",\r\n                \"Svezia\",\r\n                \"Svizzera\",\r\n                \"Turchia\",\r\n                \"Ucraina\",\r\n                \"Ungheria\",\r\n\r\n            ]  # etc\r\n\r\n            variable1 = StringVar(follow_frame)\r\n            variable1.set(country[0])  # default value\r\n\r\n            w1 = OptionMenu(follow_frame, variable1, *country)\r\n            w1.place(x=70, y=350, width=175)\r\n\r\n            #  communicate back to the scrollbar\r\n            text['yscrollcommand'] = scrollbar.set\r\n\r\n            location_region_follow_check_button = Checkbutton(follow_frame, text=\"Follow by region:\", bg=\"grey\",\r\n                                                              variable=region_check_var, command=region_option)\r\n            location_region_follow_check_button.place(x=356, y=330, width=175)\r\n\r\n            region = [\r\n                \"-------\",\r\n                \"Valle d’Aosta\",\r\n                \"Piemonte\",\r\n                \"Liguria\",\r\n                \"Lombardia\",\r\n                \"Trentino Alto Adige*\",\r\n                \"Veneto\",\r\n                \"Friuli-Venezia Giulia\",\r\n                \"Emilia-Romagna\",\r\n                \"Toscana\",\r\n                \"Umbria\",\r\n                \"Marche\",\r\n                \"Lazio\",\r\n                \"Abruzzo\",\r\n                \"Molise\",\r\n                \"Campania\",\r\n                \"Puglia\",\r\n                \"Basilicata\",\r\n                \"Calabria\",\r\n                \"Sicilia\",\r\n                \"Sardegna\",\r\n            ]  # etc\r\n\r\n            variable2 = StringVar(follow_frame)\r\n            variable2.set(region[0])  # default value\r\n\r\n            w2 = OptionMenu(follow_frame, variable2, *region)\r\n            w2.place(x=356, y=350, width=175)\r\n\r\n            #  communicate back to the scrollbar\r\n            text['yscrollcommand'] = scrollbar.set\r\n\r\n            location_city_follow_check_button = Checkbutton(follow_frame, text=\"Follow by city:\", bg=\"grey\",\r\n                                                            variable=city_check_var, command=city_options)\r\n            location_city_follow_check_button.place(x=642, y=330, width=175)\r\n\r\n            city = [\r\n                \"-------\",\r\n                \"Bologna\",\r\n                \"Ferrara\",\r\n                \"Forlì-Cesena\",\r\n                \"Modena\",\r\n                \"Parma\",\r\n                \"Piacenza\",\r\n                \"Ravenna\",\r\n                \"Reggio Emilia\",\r\n                \"Rimini\",\r\n            ]  # etc\r\n\r\n            variable3 = StringVar(follow_frame)\r\n            variable3.set(city[0])  # default value\r\n\r\n            w3 = OptionMenu(follow_frame, variable3, *city)\r\n            w3.place(x=642, y=350, width=175)\r\n\r\n            #  communicate back to the scrollbar\r\n            text['yscrollcommand'] = scrollbar.set\r\n\r\n            # Follow by account\r\n\r\n            account_follow_label = Label(follow_frame, text=\"Insert account:\")\r\n            account_follow_label.place(x=20, y=425, height=50, width=100)\r\n\r\n            account_follow_frame = Frame(follow_frame, bd=5, bg=\"grey\")\r\n            account_follow_frame.place(x=20, y=465, height=100, width=700)\r\n\r\n            # apply the grid layout\r\n            account_follow_frame.grid_columnconfigure(0, weight=1)\r\n            account_follow_frame.grid_rowconfigure(0, weight=1)\r\n\r\n            # create the text widget\r\n            text1 = Text(account_follow_frame, height=10)\r\n            text1.grid(row=0, column=0, sticky='ew')\r\n\r\n            # create a scrollbar widget and set its command to the text widget\r\n            scrollbar1 = Scrollbar(account_follow_frame, orient='vertical', command=text1.yview)\r\n            scrollbar1.grid(row=0, column=1, sticky='ns')\r\n\r\n            #  communicate back to the scrollbar\r\n            text1['yscrollcommand'] = scrollbar1.set\r\n\r\n            def start_follow_bot(event):\r\n\r\n                # Follow by hashtag:\r\n                if hashtag_check_var == 1:\r\n                    hashtags = text.get(1.0, \"end-1c\")\r\n                    hashtags = hashtags.split(' ')\r\n                    if hashtags:\r\n                        t_follow_hashtag = Thread(target=ig_follow_hashtag, args=(hashtags,))\r\n                        t_follow_hashtag.start()\r\n                # Follow by location\r\n                if location_check_var == 1:\r\n                    locations = variable1\r\n                    if locations:\r\n                        t_follow_location = Thread(target=ig_follow_location, args=(locations,))\r\n                        t_follow_location.start()\r\n                # Follow by account\r\n                if account_check_var == 1:\r\n                    print(account_check_var)\r\n                    accounts = text1.get(1.0, \"end-1c\")\r\n                    accounts = accounts.split(',')\r\n                    if accounts:\r\n                        t_follow_account = Thread(target=ig_follow_account, args=(accounts,))\r\n                        t_follow_account.start()\r\n\r\n            start_follower_bot_button.bind(\"<Button-1>\", start_follow_bot)\r\n\r\n\r\n        def dashboard(event):\r\n\r\n            f = open(\"Credenziali\", \"r\")\r\n            credential = f.read()\r\n            f.close()\r\n\r\n            def getProxies():\r\n                r = requests.get('https://free-proxy-list.net/')\r\n                soup = BeautifulSoup(r.content, 'html.parser')\r\n                table = soup.find('tbody')\r\n                proxies = []\r\n                for row in table:\r\n                    if row.find_all('td')[4].text == 'elite proxy':\r\n                        proxy = ':'.join([row.find_all('td')[0].text, row.find_all('td')[1].text])\r\n                        proxies.append(proxy)\r\n                    else:\r\n                        pass\r\n                return proxies\r\n            if self.is_login == 1:\r\n                dashboard_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n                follow_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n                like_dislike_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n                direct_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n                unfollow_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n                auto_publish_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n                # Set titles\r\n\r\n                dashboard_label = Label(dashboard_frame, text=\"Dashboard\", bg=\"grey\", fg=\"white\")\r\n                dashboard_label.place(x=0, y=0, height=50, width=100)\r\n\r\n                # Logout\r\n                logout_button = Button(dashboard_frame, text=\"Logout\", command=\"set\")\r\n                logout_button.place(x=100, y=0, height=50, width=100)\r\n                f = open(\"Credenziali\", \"r\")\r\n                username = f.readline()\r\n                f.close()\r\n                account_text = \"Actually account: \" + str(username)\r\n                print(account_text)\r\n                dashboard_label = Label(dashboard_frame, text=account_text, bg=\"grey\", fg=\"white\")\r\n                dashboard_label.place(x=225, y=0, height=50)\r\n                statistics_label = Label(dashboard_frame, text=\"Statistics:\", bg=\"grey\", fg=\"white\")\r\n                statistics_label.place(x=0, y=75, width=900)\r\n\r\n                # Actually account:\r\n                def logout(event):\r\n                    t_logout = Thread(target=ig_logout)\r\n                    t_logout.start()\r\n                    self.is_login = 0\r\n                    dashboard(0)\r\n                logout_button.bind(\"<Button-1>\", logout)\r\n\r\n            else:\r\n                # Login with ig credential in a file\r\n                dashboard_frame.place(x=300, y=0, height=0, width=0)\r\n                # Create instagram login frame\r\n                instagram_background_login_frame = Frame(self.root, bd=5, bg=\"white\")\r\n                instagram_background_login_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n                # Set title of login frame\r\n                instagram_login_frame_title = Label(instagram_background_login_frame,\r\n                                                    text=\"Login in corso:\",\r\n                                                    bg=\"white\")\r\n                instagram_login_frame_title.place(x=400, y=250)\r\n\r\n                background_progress = ttk.Progressbar(instagram_background_login_frame, orient=HORIZONTAL,\r\n                                                      length=100, mode='determinate', )\r\n                background_progress.place(x=400, y=275)\r\n                background_progress['value'] = 0\r\n\r\n                def progress_control():\r\n                    for a in range(100):\r\n                        background_progress['value'] = a\r\n                        time.sleep(0.01)\r\n                    ig_background_login_check()\r\n\r\n                t_bk_pb = Thread(target=progress_control)\r\n                t_bk_pb.start()\r\n                var1 = 0\r\n                proxy_list1 = getProxies()\r\n                t1_bk_login = Thread(target=ig_login, args=(proxy_list1, \"\", \"\", var1))\r\n                t1_bk_login.start()\r\n\r\n                def ig_background_login_check():\r\n                    background_progress.destroy()\r\n                    log_file_str = os.listdir(\r\n                        \"/Users/fabiodonello/Desktop/Esame OOP/InstgramBot_2/config/log\")\r\n                    log_file = open(\"/Users/fabiodonello/Desktop/Esame OOP/InstgramBot_2/config/log/\"\r\n                                    + log_file_str[0], \"r\")\r\n                    ll = StringVar\r\n                    for last_line in log_file:\r\n                        ll = last_line\r\n                        pass\r\n                    if \"Username or password is incorrect\" in ll:\r\n                        messagebox.showinfo(\"Login fail\", \"Username or password wrong\")\r\n                        dashboard(0)\r\n                    if \"too many requests\" in ll:\r\n                        messagebox.showinfo(\"Login fail\", \"To many request from instagram, wait 5 minutes\")\r\n                        dashboard(0)\r\n                    self.is_login = 1\r\n                    instagram_background_login_frame.destroy()\r\n                    dashboard(0)\r\n\r\n                # ----------------------------------------------------------------------------------------------------\r\n                # Login with a request of ig credential\r\n                if credential == \"\":\r\n                    print(\"maaaa\")\r\n                    dashboard_frame.place(x=300, y=0, height=0, width=0)\r\n                    # Create instagram login frame\r\n                    instagram_login_frame = Frame(self.root, bd=5, bg=\"white\")\r\n                    instagram_login_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n                    # Set title of login frame\r\n                    instagram_login_frame_title = Label(instagram_login_frame,\r\n                                                        text=\"Prima di accedere alle funzionalità \"\r\n                                                             \"di giudoinstabot accedi al profilo\"\r\n                                                             \" instagram che vuoi gestire: \",\r\n                                                        bg=\"white\")\r\n                    instagram_login_frame_title.place(x=0, y=30)\r\n\r\n                    # Insertion box Email & password\r\n\r\n                    instagram_username_label = Label(instagram_login_frame, text=\"Username\", bg=\"white\")\r\n                    instagram_username_label.place(x=0, y=85, height=50, width=150)\r\n                    instagram_password_label = Label(instagram_login_frame, text=\"Password\", bg=\"white\")\r\n                    instagram_password_label.place(x=0, y=136, height=50, width=150)\r\n\r\n                    instagram_username_entry = Entry(instagram_login_frame, bg=\"yellow\")\r\n                    instagram_username_entry.place(x=175, y=85, height=50, width=240)\r\n                    instagram_password_entry = Entry(instagram_login_frame, bg=\"yellow\", show=\"*\")\r\n                    instagram_password_entry.place(x=175, y=135, height=50, width=240)\r\n\r\n                    check_var1 = IntVar()\r\n\r\n                    def show_password():\r\n                        if check_var1.get() == 1:\r\n                            instagram_password_entry[\"show\"] = \"\"\r\n                        if check_var1.get() == 0:\r\n                            instagram_password_entry[\"show\"] = \"*\"\r\n\r\n                    instagram_password_check_box = Checkbutton(instagram_login_frame, text=\"show password\",\r\n                                                               variable=check_var1, command=show_password)\r\n\r\n                    instagram_access_button = Button(instagram_login_frame, text=\"Login\", command=\"set\")\r\n                    instagram_access_button.place(x=0, y=195, height=50, width=150)\r\n\r\n                    # Access management\r\n\r\n                    def access_try(event):\r\n                        username_text = instagram_username_entry.get()\r\n                        password_text = instagram_password_entry.get()\r\n                        print(username_text)\r\n                        print(password_text)\r\n                        if username_text and password_text:\r\n                            proxy_list1 = getProxies()\r\n                            instagram_access_button.destroy()\r\n                            instagram_info_label = Label(instagram_login_frame, text=\"Login in process: \", bg=\"white\")\r\n                            instagram_info_label.place(x=0, y=195, height=50, width=150)\r\n                            progress = ttk.Progressbar(instagram_login_frame, orient=HORIZONTAL,\r\n                                                       length=100, mode='determinate', )\r\n                            progress.place(x=175, y=215)\r\n                            progress['value'] = 0\r\n\r\n                            def progress_control():\r\n                                for a in range(100):\r\n                                    progress['value'] = a\r\n                                    time.sleep(0.3)\r\n                                ig_login_check()\r\n\r\n                            t_pb = Thread(target=progress_control)\r\n                            t_pb.start()\r\n                            var1 = 1\r\n\r\n                            t1_login = Thread(target=ig_login, args=(proxy_list1, username_text, password_text, var1))\r\n                            t1_login.start()\r\n\r\n                            def ig_login_check():\r\n                                progress.destroy()\r\n                                log_file_str = os.listdir(\r\n                                    \"/Users/fabiodonello/Desktop/Esame OOP/InstgramBot_2/config/log\")\r\n                                log_file = open(\"/Users/fabiodonello/Desktop/Esame OOP/InstgramBot_2/config/log/\"\r\n                                                + log_file_str[0], \"r\")\r\n                                ll = StringVar\r\n                                for last_line in log_file:\r\n                                    ll = last_line\r\n                                    pass\r\n                                if \"Username or password is incorrect\" in ll:\r\n                                    messagebox.showinfo(\"Login fail\", \"Username or password wrong\")\r\n                                    dashboard(0)\r\n                                if \"too many requests\" in ll:\r\n                                    messagebox.showinfo(\"Login fail\", \"To many request from instagram, wait 5 minutes\")\r\n                                    dashboard(0)\r\n                                self.is_login = 1\r\n                                instagram_login_frame.destroy()\r\n                                dashboard(0)\r\n\r\n                    instagram_access_button.bind(\"<Button-1>\", access_try)\r\n\r\n\r\n        auto_publish_button.bind(\"<Button-1>\", auto_publish)\r\n        unfollow_button.bind(\"<Button-1>\", unfollow)\r\n        direct_button.bind(\"<Button-1>\", direct)\r\n        l_d_button.bind(\"<Button-1>\", like_dislike)\r\n        follow_button.bind(\"<Button-1>\", follow)\r\n        dashboard_button.bind(\"<Button-1>\", dashboard)\r\n\r\n        dashboard(0)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MainPage.py b/MainPage.py
--- a/MainPage.py	
+++ b/MainPage.py	
@@ -3,7 +3,6 @@
 if os.path.isfile("path/to/config/file.json"):
     os.remove("path/to/config/file.json")
 
-
 from tkinter import *
 from tkcalendar import *
 from tkinter import filedialog
@@ -27,9 +26,8 @@
 from tkinter import messagebox
 import re
 import matplotlib
+
 matplotlib.use("TkAgg")
-from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg
-from matplotlib.figure import Figure
 
 
 class MainPage:
@@ -454,6 +452,7 @@
                 print(tuple_value)
                 t_unfollow = Thread(target=ig_unfollow, args=(tuple_value, white_list_value))
                 t_unfollow.start()
+
             start_un_follower_bot_button.bind("<Button-1>", start_unfollow_bot)
 
         def direct(event):
@@ -738,13 +737,11 @@
             location_text = Text(location_likes_frame, height=10)
             location_text.grid(row=0, column=0, sticky="ew")
 
-
             location_scrollbar = Scrollbar(location_likes_frame, orient="vertical", command=location_text.yview)
             location_scrollbar.grid(row=0, column=1, sticky="ns")
 
             location_text['yscrollcommand'] = location_scrollbar.set
 
-
         def follow(event):
 
             dashboard_frame.place(x=300, y=0, height=0, width=0)
@@ -1032,7 +1029,6 @@
 
             start_follower_bot_button.bind("<Button-1>", start_follow_bot)
 
-
         def dashboard(event):
 
             f = open("Credenziali", "r")
@@ -1051,6 +1047,7 @@
                     else:
                         pass
                 return proxies
+
             if self.is_login == 1:
                 dashboard_frame.place(x=300, y=0, height=600, width=900)
 
@@ -1088,6 +1085,7 @@
                     t_logout.start()
                     self.is_login = 0
                     dashboard(0)
+
                 logout_button.bind("<Button-1>", logout)
 
             else:
@@ -1236,7 +1234,6 @@
 
                     instagram_access_button.bind("<Button-1>", access_try)
 
-
         auto_publish_button.bind("<Button-1>", auto_publish)
         unfollow_button.bind("<Button-1>", unfollow)
         direct_button.bind("<Button-1>", direct)
Index: .idea/InstgramBot_0.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n  <component name=\"PyDocumentationSettings\">\r\n    <option name=\"format\" value=\"PLAIN\" />\r\n    <option name=\"myDocStringFormat\" value=\"Plain\" />\r\n  </component>\r\n  <component name=\"TestRunnerService\">\r\n    <option name=\"PROJECT_TEST_RUNNER\" value=\"pytest\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/InstgramBot_0.iml b/.idea/InstgramBot_0.iml
--- a/.idea/InstgramBot_0.iml	
+++ b/.idea/InstgramBot_0.iml	
@@ -2,7 +2,7 @@
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$" />
-    <orderEntry type="inheritedJdk" />
+    <orderEntry type="jdk" jdkName="Python 3.8 (base)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
   <component name="PyDocumentationSettings">
