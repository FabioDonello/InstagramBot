Index: try.py
===================================================================
diff --git a/try.py b/try.py
deleted file mode 100644
--- a/try.py	(revision 3f04b4ce130e1cdb5afdfd86754d240832307434)
+++ /dev/null	(revision 3f04b4ce130e1cdb5afdfd86754d240832307434)
@@ -1,138 +0,0 @@
-from tkinter import *
-from tkinter import ttk
-from datetime import datetime
-import os
-import csv
-
-root = Tk()
-root.title("TRY")
-root.geometry("1200x600")
-root.resizable(True, True)
-
-tframe = Frame(root)
-tframe.place(x=0, y=285, height=300, width=500)
-
-table = ttk.Treeview(root)
-table.place(x=0, y=285, height=150, width=450)
-table_scroll = ttk.Scrollbar(root, orient="vertical", command=table.yview)
-table_scroll.place(x=450, y=285, height=150)
-table.configure(yscrollcommand=table_scroll.set)
-
-table['columns'] = ('File', 'Datetime')
-
-table.column('#0', width=0, stretch=NO)
-table.column("File", anchor=W, width=200)
-table.column("Datetime", anchor=W, width=140)
-
-table.heading("#0", text="")
-table.heading("File", text="File", anchor=W)
-table.heading("Datetime", text="Datetime", anchor=W,
-              command=lambda: tree_view_sort_column(table, "Datetime"))
-
-date_time1 = "12/12/2021 14:54"
-date_time2 = "12/11/2021 13:30"
-date_time3 = "12/01/2021 12:24"
-date_time4 = "23/05/2021 10:00"
-date_time5 = "23/05/2021 10:01"
-
-
-def tree_view_sort_column(tv, col):
-    l = [(tv.set(k, col), k) for k in tv.get_children('')]
-    l.sort(key=lambda x: datetime.strptime(x[0], '%d/%m/%Y %H:%M'))
-
-    for index, (val, k) in enumerate(l):
-        tv.move(k, '', index)
-
-
-'''f = open("Upload_file_try.txt", "w")
-
-item_id1 = table.insert(parent='', index='end', values=("Quinto", date_time1))
-values1 = table.item(item_id1)['values']
-for element in values1:
-    f.write(element + " ")
-f.write("\n")
-
-item_id2 = table.insert(parent='', index='end', values=("Quarto", date_time2))
-values2 = table.item(item_id2)['values']
-for element in values2:
-    f.write(element + " ")
-f.write("\n")
-
-item_id3 = table.insert(parent='', index='end', values=("Primo", date_time3))
-values3 = table.item(item_id3)['values']
-for element in values3:
-    f.write(element + " ")
-f.write("\n")
-
-item_id4 = table.insert(parent='', index='end', values=("Secondo", date_time4))
-values4 = table.item(item_id4)['values']
-for element in values4:
-    f.write(element + " ")
-f.write("\n")
-
-item_id5 = table.insert(parent='', index='end', values=("Terzo", date_time5))
-values5 = table.item(item_id5)['values']
-for element in values5:
-    f.write(element + " ")
-
-tree_view_sort_column(table, "Datetime")
-
-f.close()'''
-
-'''with open("Upload_file_try.txt") as my_file:
-    while True:
-        try:
-            line = my_file.readline().split(None)[1]
-        except IndexError:
-            break
-        print(line)
-'''
-
-
-def remove_file():
-    global item, item_text
-    print("selected items: ")
-    for item in table.selection():
-        print(item)
-        print(table.selection())
-        item_text = table.item(item, 'values')[0]
-        print(item_text)
-        table.delete(item)
-    with open("Upload_file_try.txt", "r") as my_file:
-        lines = my_file.readlines()
-        print(lines)
-    with open("Upload_file_try.txt", "w")as my_file:
-        for line in lines:
-            print(line.split(sep=None)[0].strip())
-            if line.split(sep=None)[0].strip() != item_text:
-                my_file.write(line)
-
-
-def save():
-    with open("new_try.csv", "w", newline='')as my_file:
-        csv_writer = csv.writer(my_file, delimiter=',')
-
-        for row_id in table.get_children():
-            row = table.item(row_id)['values']
-            print('save row: ', row)
-            csv_writer.writerow(row)
-
-
-def load():
-    with open("new_try.csv") as my_file:
-        csv_read = csv.reader(my_file, delimiter=',')
-
-        for row in csv_read:
-            print('load row: ', row)
-            table.insert("", 'end', values=row)
-
-
-remove = Button(root, text="Remove", command=remove_file)
-remove.place(x=480, y=285, height=50, width=150)
-
-save = Button(root, text="Save", command=save)
-save.place(x=480, y=200, height=50, width=100)
-
-load = Button(root, text="Load", command=load)
-load.place(x=480, y=150, height=50, width=100)
-root.mainloop()
Index: File photo.txt
===================================================================
diff --git a/File photo.txt b/File photo.txt
deleted file mode 100644
--- a/File photo.txt	(revision 3f04b4ce130e1cdb5afdfd86754d240832307434)
+++ /dev/null	(revision 3f04b4ce130e1cdb5afdfd86754d240832307434)
@@ -1,1 +0,0 @@
-..\Crociera\Foto\photo1636147266.jpeg, 04/12/2021 08:00
Index: BOT_Manager.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from instabot import Bot\r\nimport os\r\nimport glob\r\nimport time\r\n\r\nimport datetime\r\nimport MainPage\r\nfrom geopy.geocoders import Nominatim\r\nfrom apscheduler.schedulers.blocking import BlockingScheduler\r\n\r\nimport shutil\r\n\r\nfile_path = r'C:\\Users\\39377\\Desktop\\InstaBot\\config\\log'\r\nshutil.rmtree(file_path)\r\nbot = Bot()\r\nfile_id = format(id(bot))\r\nx = 0\r\n\r\n\r\ndef ig_login(proxy_list, username, password, var):\r\n    # cookie_del = glob.glob(\"config/*cookie.json\")\r\n    # os.remove(cookie_del[0])\r\n    if var == 1:\r\n        # bot.login(username=username, password=password, is_threaded=True)\r\n        f = open(\"Credenziali\", \"w\")\r\n        f.write(username)\r\n        f.write(\"\\n\")\r\n        f.write(password)\r\n        f.close()\r\n\r\n        print(\"Login riuscito A\")\r\n\r\n    if var == 0:\r\n        f = open(\"Credenziali\", \"r\")\r\n        username = f.readline()\r\n        password = f.readline()\r\n        f.close()\r\n        # bot.login(username=username, password=password, is_threaded=True)\r\n        x = 1\r\n        print(\"Login riuscito B\")\r\n\r\n\r\ndef ig_logout():\r\n    f = open(\"Credenziali\", \"r\")\r\n    username = f.readline()\r\n    f.close()\r\n    f = open(\"Credenziali\", \"w\").close()\r\n    # bot.logout(username=username, is_threaded=True)\r\n    print(\"Logout eseguito\")\r\n\r\n\r\n# Set follow\r\ndef ig_follow_hashtag(hashtags):\r\n    while x == 0:\r\n        print(\"aspetto il login\")\r\n        time.sleep(2)\r\n\r\n    print(hashtags)\r\n    for hashtag in hashtags:\r\n        users = bot.get_hashtag_users(hashtag)\r\n        print(time.sleep(300))\r\n        for user in users:\r\n            bot.follow(user)\r\n            print(time.sleep(300))\r\n\r\n\r\ndef ig_follow_location(location):\r\n    app = Nominatim(user_agent=\"tutorial\")\r\n    localization = app.geocode(location).raw\r\n\r\n    latitude = localization['lat']\r\n    longitude = localization['lon']\r\n    position = bot.get_locations_from_coordinates(latitude=latitude, longitude=longitude)\r\n\r\n    for positions in position:\r\n        user_position = bot.get_geotag_users(geotag=positions)\r\n        for users in user_position:\r\n            bot.follow_followers(user_id=users)\r\n            time.sleep(240)\r\n\r\n\r\ndef ig_follow_account(accounts):\r\n    while x == 0:\r\n        print(\"aspetto il login\")\r\n        time.sleep(2)\r\n\r\n    print(accounts)\r\n    for account in accounts:\r\n        users = bot.get_user_followers(account)\r\n        print(time.sleep(300))\r\n        for user in users:\r\n            bot.follow(user)\r\n            print(time.sleep(300))\r\n\r\n\r\n# Set Likes\r\ndef ig_likes_hashtag(hashtags):\r\n    for hashtag in hashtags:\r\n        medias = bot.get_hashtag_medias(hashtag)\r\n        for media in medias:\r\n            bot.like(media)\r\n            time.sleep(30)\r\n\r\n\r\ndef ig_likes_location(location):\r\n    app = Nominatim(user_agent=\"tutorial\")\r\n    localization = app.geocode(location).raw\r\n\r\n    latitude = localization['lat']\r\n    longitude = localization['lon']\r\n    position = bot.get_locations_from_coordinates(latitude=latitude, longitude=longitude)\r\n\r\n    amount = 850\r\n    while amount != 0:\r\n        bot.like_location_feed(place=position, amount=1)\r\n        time.sleep(40)\r\n        amount = amount - 1\r\n\r\n\r\ndef ig_likes_account(accounts):\r\n    for account in accounts:\r\n        bot.like_followers(user_id=account, nlikes=3)\r\n        time.sleep(90)\r\n\r\n\r\n# Set auto-publish\r\n'''def ig_upload_photo():\r\n    print(\"Done\")\r\n    print(datetime.datetime.now())\r\n\r\ndef schedule_upload_photo():\r\n\r\n    scheduler = BlockingScheduler(timezone='Europe/Rome')\r\n    n = 2\r\n    while n != 0:\r\n        scheduler.add_job(ig_upload_photo, 'interval', seconds=20)\r\n         print(datetime.datetime.now())\r\n        n = n - 1\r\n        scheduler.get_jobs()\r\n        time.sleep(10)\r\n\r\nscheduler.start()\r\n'''\r\n\r\n\r\ndef ig_unfollow(list_value, white_list):\r\n    f_name = r\"/Users/fabiodonello/Desktop/Esame OOP/InstgramBot_2/config/followed.txt\"\r\n\r\n    def file_len(f_name):\r\n        with open(f_name, \"r\") as followed_file:\r\n            for i, l in enumerate(followed_file):\r\n                pass\r\n        return i + 1\r\n\r\n    followed_file_len = file_len(f_name)\r\n    print(followed_file_len)\r\n    with open(f_name, \"r\") as followed_file:\r\n        for y in range(followed_file_len):\r\n            user_id = followed_file.readline()\r\n            print(user_id)\r\n            \"\"\"user_info = bot.get_user_info(user_id)            \r\n            time.sleep(3)\r\n            if list_value[0][0] == 1:\r\n                if user_info['giorno in cui mi ha iniziato a seguire'] + list_value[0][1] > \"data odierna\":\r\n                    if user_info['username'] not in white_list:\r\n                        bot.unfollow(user_id)\r\n                        time.sleep(3)\r\n            if list_value[1][0] == 1:\r\n                if user_info['follower'] < list_value[1][1] :\r\n                    if user_info['username'] not in white_list:\r\n                        bot.unfollow(user_id)\r\n                        time.sleep(3)\r\n            if list_value[2][0] == 1:\r\n                if user_info['numero media'] < list_value[2][1] :\r\n                    if user_info['username'] not in white_list:\r\n                        bot.unfollow(user_id)\r\n                        time.sleep(3)\r\n            if list_value[3][0] == 1:\r\n                if (user_info['data ultimo post'] and user_info['data ultimo storia']) < list_value[3][1]:\r\n                    if user_info['username'] not in white_list:\r\n                        bot.unfollow(user_id)\r\n                        time.sleep(3) \"\"\"\r\n\r\n\r\ndef ig_direct(list_value, message):\r\n    # Direct your follower\r\n    if list_value[0][0] == 1:\r\n        f = open(\"Credenziali\", \"r\")\r\n        username = f.readline()\r\n        f.close()\r\n        following = bot.get_user_following(username)\r\n        following_id = bot.convert_to_user_id(following)\r\n        for user in following_id:\r\n            bot.send_message(user, message)\r\n\r\n    # Direct your following\r\n    if list_value[1][0] == 1:\r\n        print(\"sono dentro\")\r\n        f_name = r\"/Users/fabiodonello/Desktop/Esame OOP/InstgramBot_2/config/followed.txt\"\r\n\r\n        def file_len(f_name):\r\n            with open(f_name, \"r\") as followed_file:\r\n                for i, l in enumerate(followed_file):\r\n                    pass\r\n            return i + 1\r\n\r\n        followed_file_len = file_len(f_name)\r\n        print(followed_file_len)\r\n        with open(f_name, \"r\") as followed_file:\r\n            for y in range(followed_file_len):\r\n                user_id = followed_file.readline()\r\n                print(user_id)\r\n                bot.send_message(user_id, message)\r\n                time.sleep(3)\r\n\r\n    # Direct your account follower\r\n    if list_value[2][0] == 1:\r\n        for account in list_value[2][1]:\r\n            account_id = bot.convert_to_user_id(account)\r\n            account_followers = bot.get_user_followers(account_id)\r\n            time.sleep(3)\r\n            for account_follower in account_followers:\r\n                bot.send_message(account_follower, message)\r\n                time.sleep(3)\r\n\r\n    # Direct with hashtag\r\n    if list_value[3][0] == 1:\r\n        for hashtag in list_value[3][1]:\r\n            hashtag_users = bot.get_hashtag_users(hashtag)\r\n            time.sleep(3)\r\n            for hashtag_user in hashtag_users:\r\n                bot.send_message(hashtag_user, message)\r\n                time.sleep(3)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BOT_Manager.py b/BOT_Manager.py
--- a/BOT_Manager.py	(revision 3f04b4ce130e1cdb5afdfd86754d240832307434)
+++ b/BOT_Manager.py	(date 1638907771083)
@@ -2,42 +2,53 @@
 import os
 import glob
 import time
-
-import datetime
-import MainPage
 from geopy.geocoders import Nominatim
-from apscheduler.schedulers.blocking import BlockingScheduler
-
+import requests
+from requests.auth import HTTPProxyAuth
 import shutil
+from instabot import API
 
 file_path = r'C:\Users\39377\Desktop\InstaBot\config\log'
 shutil.rmtree(file_path)
 bot = Bot()
 file_id = format(id(bot))
-x = 0
+
+
+def richieste():
+    print(bot.api.total_requests)
+
 
+def is_login():
+    return bot.api.is_logged_in
 
-def ig_login(proxy_list, username, password, var):
+
+def ig_login(username, password, var):
     # cookie_del = glob.glob("config/*cookie.json")
     # os.remove(cookie_del[0])
+    # proxy="Selfabiodonello989:J0q9FyC@45.8.197.222:45785"
+    richieste()
+    print("faccio il login")
     if var == 1:
-        # bot.login(username=username, password=password, is_threaded=True)
+        bot.login(username=username, password=password, use_cookie=True, is_threaded=True)
         f = open("Credenziali", "w")
         f.write(username)
-        f.write("\n")
+        f.write(":")
         f.write(password)
         f.close()
-
-        print("Login riuscito A")
-
+        print("Login riuscito senza avere le credenziali")
     if var == 0:
         f = open("Credenziali", "r")
-        username = f.readline()
-        password = f.readline()
+        text = f.read()
+        text = text.split(":")
+        username = text[0]
+        password = text[1]
+        print(username)
+        print(password)
         f.close()
-        # bot.login(username=username, password=password, is_threaded=True)
-        x = 1
-        print("Login riuscito B")
+        bot.login(username=username, password=password, use_cookie=True, is_threaded=True)
+        print("Login riuscito avendo le credenziali")
+        b = bot.api.is_logged_in
+        print(b)
 
 
 def ig_logout():
@@ -51,10 +62,6 @@
 
 # Set follow
 def ig_follow_hashtag(hashtags):
-    while x == 0:
-        print("aspetto il login")
-        time.sleep(2)
-
     print(hashtags)
     for hashtag in hashtags:
         users = bot.get_hashtag_users(hashtag)
@@ -80,10 +87,6 @@
 
 
 def ig_follow_account(accounts):
-    while x == 0:
-        print("aspetto il login")
-        time.sleep(2)
-
     print(accounts)
     for account in accounts:
         users = bot.get_user_followers(account)
@@ -142,9 +145,19 @@
 scheduler.start()
 '''
 
+val = False
+
+
+def unfollow_stp(a):
+    global val
+    if a == 1:
+        val = True
+    if a == 2:
+        val = False
+
 
 def ig_unfollow(list_value, white_list):
-    f_name = r"/Users/fabiodonello/Desktop/Esame OOP/InstgramBot_2/config/followed.txt"
+    f_name = r"C:\Users\39377\Desktop\InstaBot\config\followed.txt"
 
     def file_len(f_name):
         with open(f_name, "r") as followed_file:
@@ -156,8 +169,12 @@
     print(followed_file_len)
     with open(f_name, "r") as followed_file:
         for y in range(followed_file_len):
+            if val:
+                print("unfollow interrotto")
+                return
             user_id = followed_file.readline()
             print(user_id)
+            time.sleep(2)
             """user_info = bot.get_user_info(user_id)            
             time.sleep(3)
             if list_value[0][0] == 1:
@@ -196,7 +213,7 @@
     # Direct your following
     if list_value[1][0] == 1:
         print("sono dentro")
-        f_name = r"/Users/fabiodonello/Desktop/Esame OOP/InstgramBot_2/config/followed.txt"
+        f_name = r"C:\Users\39377\Desktop\InstaBot\config\followed.txt"
 
         def file_len(f_name):
             with open(f_name, "r") as followed_file:
@@ -231,3 +248,32 @@
             for hashtag_user in hashtag_users:
                 bot.send_message(hashtag_user, message)
                 time.sleep(3)
+
+
+def ig_get_follow_number():
+    """f = open("Credenziali", "r")
+    username = f.readline()
+    f.close()
+    bot.get_user_followers(username)
+    n_folloewr = len(username)
+    f_name = r"/Users/fabiodonello/Desktop/Esame OOP/InstgramBot_2/config/data/followed_data.txt"
+    f1 = open(f_name, "a")
+    print(str(n_folloewr)+":")
+    f1.close()"""
+
+
+def ig_get_like_number():
+    """f = open("Credenziali", "r")
+    username = f.readline()
+    f.close()
+    medias_id = bot.get_user_medias(username)
+    n_like = 0
+    n_post = len(medias_id)
+    for media in medias_id:
+        like = 20
+        media_info = bot.get_media_info(media)
+        like = like + media['like']
+    f_name = r"/Users/fabiodonello/Desktop/Esame OOP/InstgramBot_2/config/data/like_data.txt"
+    f2 = open(f_name, "a")
+    print(str(n_like) + ":")
+    f2.close()"""
Index: .idea/InstgramBot_0.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.8 (base)\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n  <component name=\"PyDocumentationSettings\">\r\n    <option name=\"format\" value=\"PLAIN\" />\r\n    <option name=\"myDocStringFormat\" value=\"Plain\" />\r\n  </component>\r\n  <component name=\"TestRunnerService\">\r\n    <option name=\"PROJECT_TEST_RUNNER\" value=\"pytest\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/InstgramBot_0.iml b/.idea/InstgramBot_0.iml
--- a/.idea/InstgramBot_0.iml	(revision 3f04b4ce130e1cdb5afdfd86754d240832307434)
+++ b/.idea/InstgramBot_0.iml	(date 1638907771068)
@@ -1,15 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<module type="PYTHON_MODULE" version="4">
+<module version="4">
   <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$" />
     <orderEntry type="jdk" jdkName="Python 3.8 (base)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
-  <component name="PyDocumentationSettings">
-    <option name="format" value="PLAIN" />
-    <option name="myDocStringFormat" value="Plain" />
-  </component>
-  <component name="TestRunnerService">
-    <option name="PROJECT_TEST_RUNNER" value="pytest" />
-  </component>
 </module>
\ No newline at end of file
Index: Login.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from tkinter import *\r\nfrom PIL import ImageTk\r\nfrom MainPage import MainPage\r\nfrom validate_email import validate_email\r\nimport DB_Manager\r\nfrom tkinter import messagebox\r\n\r\n\r\nclass Login:\r\n\r\n    # Constructor della class\r\n\r\n    def __init__(self, root):\r\n        self.root = root\r\n        self.root.title(\"Instagram Tool\")\r\n        self.root.geometry(\"1200x600\")\r\n        self.root.resizable(False, False)\r\n\r\n        # Background image\r\n        self.bg_login_image = ImageTk.PhotoImage(file=\"rid1.png\")\r\n        self.bg_login = Label(self.root, image=self.bg_login_image).place(x=0, y=0, relheight=2, relwidth=2)\r\n\r\n        # Create login frame\r\n        frame_login = Frame(self.root, bd=5, bg=\"white\")\r\n        frame_login.place(x=400, y=100, height=300, width=400)\r\n\r\n        # Set title of login frame\r\n        frame_login_title = Label(frame_login, text=\"Login\", bg=\"white\")\r\n        frame_login_title.place(x=150, y=25)\r\n\r\n        # Insertion box Email & password\r\n\r\n        email_label = Label(frame_login, text=\"Email\", bg=\"grey\", fg=\"white\")\r\n        email_label.place(x=0, y=85, height=50, width=150)\r\n        password_label = Label(frame_login, text=\"Password\", bg=\"grey\", fg=\"white\")\r\n        password_label.place(x=0, y=136, height=50, width=150)\r\n\r\n        email_entry = Entry(frame_login, bg=\"yellow\")\r\n        email_entry.place(x=150, y=85, height=50, width=240)\r\n        password_entry = Entry(frame_login, bg=\"yellow\", show=\"*\")\r\n        password_entry.place(x=150, y=135, height=50, width=240)\r\n\r\n        check_var1 = IntVar()\r\n\r\n        def show_password():\r\n            if check_var1.get() == 1:\r\n                password_entry[\"show\"] = \"\"\r\n            if check_var1.get() == 0:\r\n                password_entry[\"show\"] = \"*\"\r\n\r\n        password_check_box = Checkbutton(frame_login, text=\"show password\",\r\n                                         variable=check_var1, command=show_password)\r\n        password_check_box.place(x=0, y=190)\r\n\r\n        # Username & password button\r\n        access_button = Button(frame_login, text=\"Login\", command=\"set\")\r\n        access_button.place(x=20, y=230, height=50, width=150)\r\n        registration_button = Button(frame_login, text=\"Registration\", command=\"set\")\r\n        registration_button.place(x=190, y=230, height=50, width=150)\r\n\r\n        # Access management\r\n\r\n        def access_try(event):\r\n            username_text = email_entry.get()\r\n            password_text = password_entry.get()\r\n\r\n            if username_text:\r\n                db_table = DB_Manager.db_update(username_text[0])\r\n\r\n                if db_table:\r\n                    x = 0\r\n                    for a in db_table:\r\n                        x += 1\r\n                        if username_text == a[0] and password_text == a[1]:\r\n                            frame_login.destroy()\r\n                            MainPage(self.root)\r\n                            break\r\n                        if x == len(db_table):\r\n                            messagebox.showinfo(\"Login fail\", \"Username or password wrong\")\r\n                else:\r\n                    messagebox.showinfo(\"Login fail\", \"Username or password wrong\")\r\n\r\n            else:\r\n                messagebox.showinfo(\"Login fail\", \"Username or password wrong\")\r\n\r\n        access_button.bind(\"<Button-1>\", access_try)\r\n\r\n        # Registration manage\r\n        def register_try(event):\r\n\r\n            # Creation of registration frame\r\n            registration_frame = Frame(self.root, bd=5, bg=\"white\")\r\n            registration_frame.place(x=350, y=100, height=400, width=500)\r\n\r\n            # Registration frame title\r\n            frame_registration_title = Label(registration_frame, text=\"Registration\", bg=\"white\")\r\n            frame_registration_title.place(x=20, y=25)\r\n\r\n            # Register label\r\n            name_label_register = Label(registration_frame, text=\"Name\", bg=\"grey\", fg=\"white\")\r\n            name_label_register.place(x=0, y=85, height=50, width=150)\r\n\r\n            surname_label_register = Label(registration_frame, text=\"Surname\", bg=\"grey\", fg=\"white\")\r\n            surname_label_register.place(x=0, y=136, height=50, width=150)\r\n\r\n            email_label_register = Label(registration_frame, text=\"Email\", bg=\"grey\", fg=\"white\")\r\n            email_label_register.place(x=0, y=187, height=50, width=150)\r\n\r\n            password_label_register = Label(registration_frame, text=\"Password\", bg=\"grey\", fg=\"white\")\r\n            password_label_register.place(x=0, y=238, height=50, width=150)\r\n\r\n            # Register insertion box\r\n            first_name_entry_register = Entry(registration_frame, bg=\"yellow\")\r\n            first_name_entry_register.place(x=150, y=85, height=50, width=300)\r\n\r\n            last_name_entry_register = Entry(registration_frame, bg=\"yellow\")\r\n            last_name_entry_register.place(x=150, y=136, height=50, width=300)\r\n\r\n            email_entry_register = Entry(registration_frame, bg=\"yellow\")\r\n            email_entry_register.place(x=150, y=187, height=50, width=300)\r\n\r\n            password_entry_register = Entry(registration_frame, bg=\"yellow\")\r\n            password_entry_register.place(x=150, y=238, height=50, width=300)\r\n\r\n            # Password rules\r\n            password_rules_label = Label(registration_frame, text=\"* Password: minimum 6 characters with at least one\"\r\n                                                                  \" number *\",\r\n                                         bg=\"grey\", fg=\"white\")\r\n            password_rules_label.place(x=0, y=290, height=25, width=450)\r\n\r\n            # Registration button\r\n            registration_confirm = Button(registration_frame, text=\"Registration\", command=\"set\")\r\n            registration_confirm.place(x=225, y=325, height=50, width=150)\r\n\r\n            # Return home button\r\n            return_home_button = Button(registration_frame, text=\"Cancel\", command=\"set\")\r\n            return_home_button.place(x=50, y=325, height=50, width=150)\r\n\r\n            # Return Home manage\r\n            def return_home(event):\r\n                registration_frame.destroy()\r\n\r\n            # Registration manage\r\n            def registration_manage(event):\r\n                first_name_text = first_name_entry_register.get()\r\n                last_name_text = last_name_entry_register.get()\r\n                email_text = email_entry_register.get()\r\n                password_text = password_entry_register.get()\r\n\r\n                db_check = DB_Manager.db_update(email_text[0])\r\n\r\n                # Check Registration\r\n                if first_name_text and last_name_text:\r\n                    if str.isalnum(password_text) and str.__len__(password_text) >= 6:\r\n                        if validate_email(email_text, check_mx=True):\r\n                            if db_check:\r\n                                for control in db_check:\r\n                                    if email_text == control[0]:\r\n                                        messagebox.showerror(title='ERROR', message='This email has already been used')\r\n                                        break\r\n                                    else:\r\n                                        DB_Manager.db_add(first_name_text, last_name_text, email_text, password_text)\r\n                                        registration_frame.destroy()\r\n                            else:\r\n                                DB_Manager.db_add(first_name_text, last_name_text, email_text, password_text)\r\n                                registration_frame.destroy()\r\n                        else:\r\n                            messagebox.showerror(title='ERROR', message='Email is not valid')\r\n                    else:\r\n                        messagebox.showerror(title='ERROR', message='Password incorrect')\r\n                else:\r\n                    messagebox.showerror(title='ERROR', message='Name or surname have not been entered')\r\n\r\n            registration_confirm.bind(\"<Button-1>\", registration_manage)\r\n\r\n            return_home_button.bind(\"<Button-1>\", return_home)\r\n\r\n        registration_button.bind(\"<Button-1>\", register_try)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Login.py b/Login.py
--- a/Login.py	(revision 3f04b4ce130e1cdb5afdfd86754d240832307434)
+++ b/Login.py	(date 1638907771083)
@@ -17,8 +17,8 @@
         self.root.resizable(False, False)
 
         # Background image
-        self.bg_login_image = ImageTk.PhotoImage(file="rid1.png")
-        self.bg_login = Label(self.root, image=self.bg_login_image).place(x=0, y=0, relheight=2, relwidth=2)
+        # self.bg_login_image = ImageTk.PhotoImage(file="temp.png")
+        # self.bg_login = Label(self.root, image=self.bg_login_image).place(x=0, y=0, relheight=2, relwidth=2)
 
         # Create login frame
         frame_login = Frame(self.root, bd=5, bg="white")
Index: MainPage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\n\r\nif os.path.isfile(\"path/to/config/file.json\"):\r\n    os.remove(\"path/to/config/file.json\")\r\n\r\nfrom tkinter import *\r\nfrom tkcalendar import *\r\nfrom tkinter import filedialog\r\nfrom datetime import date\r\nfrom tkinter import ttk\r\nfrom threading import Thread\r\nfrom BOT_Manager import *\r\nimport requests\r\nfrom bs4 import BeautifulSoup\r\nfrom tkinter import messagebox\r\nimport re\r\nimport threading\r\nimport csv\r\nfrom datetime import datetime\r\n\r\n\r\nclass MainPage:\r\n\r\n    def __init__(self, root):\r\n        self.root = root\r\n        self.is_login = 0\r\n        self.root.title(\"Instagram Tool\")\r\n        self.root.geometry(\"1200x600\")\r\n        self.root.resizable(False, False)\r\n\r\n        # Create main menu frame\r\n        frame_menu = Frame(self.root, bd=0, bg=\"black\")\r\n        frame_menu.place(x=0, y=0, height=600, width=300)\r\n\r\n        # Dashboard button\r\n        dashboard_button = Button(frame_menu, text=\"Dashboard\", command=\"set\")\r\n        dashboard_button.place(x=0, y=0, height=100, width=300)\r\n\r\n        # Follow button\r\n        follow_button = Button(frame_menu, text=\"Follow\", command=\"set\")\r\n        follow_button.place(x=0, y=100, height=100, width=300)\r\n\r\n        # Unfollow button\r\n        unfollow_button = Button(frame_menu, text=\"Unfollow\", command=\"set\")\r\n        unfollow_button.place(x=0, y=200, height=100, width=300)\r\n\r\n        # Like and dislike button\r\n        l_d_button = Button(frame_menu, text=\"Like\", command=\"set\")\r\n        l_d_button.place(x=0, y=300, height=100, width=300)\r\n\r\n        # Direct button\r\n        direct_button = Button(frame_menu, text=\"Direct\", command=\"set\")\r\n        direct_button.place(x=0, y=400, height=100, width=300)\r\n\r\n        # Auto publish button\r\n        auto_publish_button = Button(frame_menu, text=\"Auto publish\", command=\"set\")\r\n        auto_publish_button.place(x=0, y=500, height=100, width=300)\r\n\r\n        # Frame manege\r\n        auto_publish_frame = Frame(self.root, bd=5, bg=\"white\")\r\n        auto_publish_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n        unfollow_frame = Frame(self.root, bd=5, bg=\"white\")\r\n        unfollow_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n        direct_frame = Frame(self.root, bd=5, bg=\"white\")\r\n        direct_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n        like_dislike_frame = Frame(self.root, bd=5, bg=\"white\")\r\n        like_dislike_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n        follow_frame = Frame(self.root, bd=5, bg=\"white\")\r\n        follow_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n        dashboard_frame = Frame(self.root, bd=5, bg=\"white\")\r\n        dashboard_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n        def auto_publish(event):\r\n\r\n            dashboard_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            follow_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            like_dislike_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            direct_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            unfollow_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            auto_publish_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n            # Set title\r\n            auto_publish_label = Label(auto_publish_frame, text=\"Auto-publish\", bg=\"steelblue\", fg=\"white\")\r\n            auto_publish_label.place(x=0, y=0, height=50, width=200)\r\n\r\n            # Set calendar\r\n\r\n            cal = Calendar(auto_publish_frame, setmode='day', date_pattern='dd/mm/yyyy', mindate=date.today(),\r\n                           background=\"steelblue\", headersbackground=\"lightsteelblue\", headersforeground=\"whitesmoke\")\r\n\r\n            cal.place(x=0, y=100, height=150, width=300)\r\n\r\n            # Select datetime button\r\n\r\n            def select_date():\r\n                my_date = cal.get_date()\r\n                selected_date = Label(auto_publish_frame, text=my_date)\r\n                selected_date.place(x=550, y=100, height=50, width=100)\r\n                return my_date\r\n\r\n            select_date_button = Button(auto_publish_frame, text=\"Select date\", command=select_date)\r\n            select_date_button.place(x=350, y=100, height=50, width=100)\r\n\r\n            # Set time button\r\n\r\n            hours = [\"--\", \"00\", \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\",\r\n                     \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\"]\r\n            minutes = [\"--\", \"00\", \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\",\r\n                       \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\",\r\n                       \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\",\r\n                       \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\"]\r\n\r\n            var_hours = StringVar(auto_publish_frame)\r\n            var_hours.set(hours[0])\r\n\r\n            var_minutes = StringVar(auto_publish_frame)\r\n            var_minutes.set(minutes[0])\r\n\r\n            hours_menu = ttk.Combobox(auto_publish_frame, textvariable=var_hours, values=hours, state='readonly')\r\n            hours_menu.place(x=450, y=175, width=50)\r\n\r\n            minutes_menu = ttk.Combobox(auto_publish_frame, textvariable=var_minutes, values=minutes, state='readonly')\r\n            minutes_menu.place(x=500, y=175, width=50)\r\n\r\n            def select_time():\r\n                time_selected = var_hours.get() + \" : \" + var_minutes.get()\r\n                selected_time = Label(auto_publish_frame, text=time_selected)\r\n                selected_time.place(x=550, y=165, height=50, width=100)\r\n                return time_selected\r\n\r\n            select_time_button = Button(auto_publish_frame, text=\"Select time\", command=select_time)\r\n            select_time_button.place(x=350, y=165, height=50, width=100)\r\n\r\n            # Set view files selected\r\n            table = ttk.Treeview(auto_publish_frame)\r\n            table.place(x=0, y=285, height=150, width=350)\r\n            table_scroll = ttk.Scrollbar(auto_publish_frame, orient=\"vertical\", command=table.yview)\r\n            table_scroll.place(x=350, y=285, height=150)\r\n            table.configure(yscrollcommand=table_scroll.set)\r\n\r\n            table['columns'] = ('File', 'Datetime')\r\n\r\n            table.column('#0', width=0, stretch=NO)\r\n            table.column(\"File\", anchor=W, width=200)\r\n            table.column(\"Datetime\", anchor=W, width=140)\r\n\r\n            table.heading(\"#0\", text=\"\")\r\n            table.heading(\"File\", text=\"File\", anchor=W)\r\n            table.heading(\"Datetime\", text=\"Datetime\", anchor=W)\r\n\r\n            # Remove selected file\r\n            def remove_file():\r\n                global item_text\r\n                for item in table.selection():\r\n                    item_text = table.item(item, 'values')[0]\r\n                    print(item_text + \"\\n\")\r\n                    table.delete(item)\r\n\r\n                with open(\"File photo.txt\", \"r\") as my_file:\r\n                    lines = my_file.readlines()\r\n                with open(\"File photo.txt\", \"w\")as my_file:\r\n                    for line in lines:\r\n                        if line.split(sep=', ')[0] != item_text:\r\n                            print(line.split(sep=', ')[0])\r\n                            my_file.write(line)\r\n\r\n            remove = Button(auto_publish_frame, text=\"Remove\", command=remove_file)\r\n            remove.place(x=380, y=285, height=50, width=150)\r\n\r\n            # Sort column\r\n            def tree_view_sort_column(tv, col):\r\n                l = [(tv.set(k, col), k) for k in tv.get_children('')]\r\n                l.sort(key=lambda x: datetime.strptime(x[0], '%d/%m/%Y %H:%M'))\r\n\r\n                for index, (val, k) in enumerate(l):\r\n                    tv.move(k, '', index)\r\n\r\n            # Set Enter the caption\r\n            caption_label = Label(auto_publish_frame, text=\"Enter the caption\", bg=\"whitesmoke\")\r\n            caption_label.place(x=580, y=285, height=50, width=100)\r\n\r\n            caption_frame = Frame(auto_publish_frame, bd=5, bg=\"silver\")\r\n            caption_frame.place(x=580, y=325, height=110, width=300)\r\n            caption_frame.grid_columnconfigure(0, weight=1)\r\n            caption_frame.grid_rowconfigure(0, weight=1)\r\n\r\n            caption_text = Text(caption_frame, height=10)\r\n            caption_text.grid(row=0, column=0, sticky=\"ew\")\r\n\r\n            caption_scroll = Scrollbar(caption_frame, orient=\"vertical\", command=caption_text.yview)\r\n            caption_scroll.grid(row=0, column=1, sticky=\"ns\")\r\n\r\n            caption_text['yscrollcommand'] = caption_scroll.set\r\n\r\n            # Set Choose file button\r\n\r\n            def choose_file():\r\n                auto_publish_frame.filename = filedialog.askopenfilename(initialdir=\"/desktop\",\r\n                                                                         title=\"Select a file\",\r\n                                                                         filetypes=(\r\n                                                                             (\"all files\", \"*.*\"),\r\n                                                                             (\"jpg files\", \"*.jpg\"),\r\n                                                                             (\"jpeg files\", \"*.jpeg\"),\r\n                                                                             (\"gif files\", \"*.gif\"),\r\n                                                                             (\"png files\", \"*.png\")))\r\n                ext = os.path.splitext(auto_publish_frame.filename)\r\n                name_file = os.path.relpath(auto_publish_frame.filename)\r\n                date_time = (select_date() + \" \" + var_hours.get() + \":\" + var_minutes.get())\r\n\r\n                if name_file:\r\n                    if ext[1] == \".jpeg\" or ext[1] == \".jpg\" or ext[1] == \".png\" or ext[1] == \".gif\":\r\n                        if select_time() != \"-- : --\":\r\n                            table.insert(parent='', index='end', values=(name_file, date_time))\r\n                            tree_view_sort_column(table, \"Datetime\")\r\n                            with open(\"File photo.txt\", \"a\") as my_file:\r\n                                my_file.write(name_file + \", \" + date_time + \"\\n\")\r\n                        else:\r\n                            messagebox.showerror(title='ERROR', message='Select date and time')\r\n                    else:\r\n                        messagebox.showerror(title='ERROR', message='The file chosen is not a photo')\r\n\r\n            choose_file_button = Button(auto_publish_frame, text=\"Choose file\", command=choose_file,\r\n                                        bg=\"whitesmoke\")\r\n            choose_file_button.place(x=230, y=0, height=50, width=100)\r\n\r\n            # Search for files by comparing dates to upload\r\n            def search_file():\r\n                while True:\r\n                    with open(\"File photo.txt\") as my_file:\r\n                        while True:\r\n                            try:\r\n                                line = my_file.readline().split(sep=', ')[1]\r\n                            except IndexError:\r\n                                break\r\n                            datetime.strptime(line.strip(), '%d/%m/%Y %H:%M')\r\n                            date_curr = datetime.now().strftime('%d/%m/%Y %H:%M')\r\n                            print(line.strip())\r\n                            print(date_curr)\r\n                            if line.strip() == date_curr:\r\n                                print(\"done\")\r\n                                # add method to shoot it on IG\r\n                            time.sleep(10)\r\n\r\n            threading.Thread(target=lambda: search_file()).start()\r\n\r\n            # Function set to save user options\r\n            def save_options():\r\n                saved_file = open(\"Autopublish options\", \"w\")\r\n\r\n                # Save table\r\n                with open(\"table file.csv\", \"w\", newline='')as my_file:\r\n                    csv_writer = csv.writer(my_file, delimiter=',')\r\n\r\n                    for row_id in table.get_children():\r\n                        row = table.item(row_id)['values']\r\n                        print('save row: ', row)\r\n                        csv_writer.writerow(row)\r\n\r\n                saved_file.write(caption_text.get(1.0, 'end-1c') + ':')\r\n                saved_file.close()\r\n\r\n            # Function set to save user options\r\n            def load_options():\r\n                load_file = open(\"Autopublish options\", \"r\")\r\n\r\n                # load table\r\n                with open(\"table file.csv\") as my_file:\r\n                    csv_read = csv.reader(my_file, delimiter=',')\r\n\r\n                    for row in csv_read:\r\n                        print('load row: ', row)\r\n                        table.insert(\"\", 'end', values=row)\r\n\r\n                data = load_file.read()\r\n                data_split = data.split(sep=':')\r\n                caption_text.insert('1.0', data_split[0])\r\n                load_file.close()\r\n\r\n            # Set save and load button\r\n            save_button = Button(auto_publish_frame, text=\"Save\", command=save_options)\r\n            save_button.place(x=350, y=0, height=50, width=100)\r\n\r\n            load_button = Button(auto_publish_frame, text='Load', command=load_options)\r\n            load_button.place(x=500, y=0, height=50, width=100)\r\n\r\n        def unfollow(event):\r\n            dashboard_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            follow_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            like_dislike_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            direct_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            unfollow_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n            auto_publish_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            # Set titles\r\n\r\n            follow_label = Label(unfollow_frame, text=\"Unfollow\", bg=\"grey\", fg=\"white\")\r\n            follow_label.place(x=0, y=0, height=50, width=100)\r\n\r\n            # Start unfollower bot\r\n\r\n            start_un_follower_bot_button = Button(unfollow_frame, text=\"Start\", command=\"set\")\r\n            start_un_follower_bot_button.place(x=100, y=0, height=50, width=100)\r\n\r\n            # Save unfollower options button\r\n\r\n            save_un_follower_option_button = Button(unfollow_frame, text=\"Save\", command=\"set\")\r\n            save_un_follower_option_button.place(x=200, y=0, height=50, width=100)\r\n\r\n            # Options label\r\n            un_follow_label = Label(unfollow_frame, text=\"Unfollow target:\", bg=\"grey\", fg=\"white\")\r\n            un_follow_label.place(x=0, y=75, width=900)\r\n            un_follow_label = Label(unfollow_frame, text=\"Unfollow white list:\", bg=\"grey\", fg=\"white\")\r\n            un_follow_label.place(x=0, y=225, width=900)\r\n\r\n            replacemant_check_var = IntVar()\r\n            account_follower_check_var = IntVar()\r\n            account_media_check_var = IntVar()\r\n            account_activity_check_var = IntVar()\r\n\r\n            def tick_manage1():\r\n                un_follow_by_media_number_check_button.deselect()\r\n                un_follow_by_activity_check_button.deselect()\r\n                un_follow_by_follower_number_check_button.deselect()\r\n\r\n            def tick_manage2():\r\n                un_follow_after_replacement_check_button.deselect()\r\n                un_follow_by_media_number_check_button.deselect()\r\n                un_follow_by_activity_check_button.deselect()\r\n\r\n            def tick_manage3():\r\n                un_follow_after_replacement_check_button.deselect()\r\n                un_follow_by_follower_number_check_button.deselect()\r\n                un_follow_by_activity_check_button.deselect()\r\n\r\n            def tick_manage4():\r\n                un_follow_after_replacement_check_button.deselect()\r\n                un_follow_by_follower_number_check_button.deselect()\r\n                un_follow_by_media_number_check_button.deselect()\r\n\r\n            un_follow_after_replacement_check_button = Checkbutton(unfollow_frame, text=\"Unfollow by replacemant:\",\r\n                                                                   bg=\"white\",\r\n                                                                   variable=replacemant_check_var,\r\n                                                                   command=tick_manage1)\r\n            un_follow_after_replacement_check_button.place(x=25, y=125)\r\n\r\n            un_follow_by_follower_number_check_button = Checkbutton(unfollow_frame, text=\"Unfollow by account\"\r\n                                                                                         \" follower:\",\r\n                                                                    bg=\"white\",\r\n                                                                    variable=account_follower_check_var,\r\n                                                                    command=tick_manage2)\r\n            un_follow_by_follower_number_check_button.place(x=25, y=175)\r\n\r\n            un_follow_by_media_number_check_button = Checkbutton(unfollow_frame, text=\"Unfollow by account\"\r\n                                                                                      \" media:\",\r\n                                                                 bg=\"white\",\r\n                                                                 variable=account_media_check_var,\r\n                                                                 command=tick_manage3)\r\n            un_follow_by_media_number_check_button.place(x=575, y=125)\r\n\r\n            un_follow_by_activity_check_button = Checkbutton(unfollow_frame, text=\"Unfollow by account\"\r\n                                                                                  \" activity:\",\r\n                                                             bg=\"white\",\r\n                                                             variable=account_activity_check_var,\r\n                                                             command=tick_manage4)\r\n            un_follow_by_activity_check_button.place(x=575, y=175)\r\n\r\n            # ------------------------------------------------------------------------------------------------\r\n            replacemant_time = [\r\n                \"\",\r\n                \"1 day\",\r\n                \"3 day\",\r\n                \"5 day\",\r\n                \"10 day\",\r\n                \"20 day\",\r\n                \"30 day\",\r\n                \"70 day\",\r\n                \"120 day\",\r\n            ]  # etc\r\n\r\n            replacemant_time_var = StringVar(unfollow_frame)\r\n            replacemant_time_var.set(replacemant_time[0])  # default value\r\n\r\n            replacemant_option_menu = OptionMenu(unfollow_frame, replacemant_time_var, *replacemant_time)\r\n            replacemant_option_menu.place(x=210, y=125)\r\n\r\n            # ------------------------------------------------------------------------------------------------\r\n            follow_number = [\r\n                \"\",\r\n                \"< 50 followers\",\r\n                \"< 100 followers\",\r\n                \"< 150 followers\",\r\n                \"< 200 followers\",\r\n                \"< 400 followers\",\r\n                \"< 800 followers\",\r\n                \"< 1200 followers\",\r\n                \"< 2000 followers\",\r\n            ]  # etc\r\n\r\n            follow_number_var = StringVar(unfollow_frame)\r\n            follow_number_var.set(follow_number[0])  # default value\r\n\r\n            follow_number_option_menu = OptionMenu(unfollow_frame, follow_number_var, *follow_number)\r\n            follow_number_option_menu.place(x=230, y=175)\r\n\r\n            # ------------------------------------------------------------------------------------------------\r\n            media_number = [\r\n                \"\",\r\n                \"< 10 media\",\r\n                \"< 20 media\",\r\n                \"< 30 media\",\r\n                \"< 40 media\",\r\n                \"< 50 media\",\r\n                \"< 60 media\",\r\n                \"< 70 media\",\r\n                \"< 80 media\",\r\n            ]  # etc\r\n\r\n            media_number_var = StringVar(unfollow_frame)\r\n            media_number_var.set(media_number[0])  # default value\r\n\r\n            media_number_option_menu = OptionMenu(unfollow_frame, media_number_var, *media_number)\r\n            media_number_option_menu.place(x=770, y=125)\r\n\r\n            # ------------------------------------------------------------------------------------------------\r\n            activity_time = [\r\n                \"\",\r\n                \"1 day\",\r\n                \"3 day\",\r\n                \"5 day\",\r\n                \"10 day\",\r\n                \"20 day\",\r\n                \"30 day\",\r\n                \"70 day\",\r\n                \"120 day\",\r\n            ]  # etc\r\n\r\n            activity_time_var = StringVar(unfollow_frame)\r\n            activity_time_var.set(activity_time[0])  # default value\r\n\r\n            activity_time_option_menu = OptionMenu(unfollow_frame, activity_time_var, *activity_time)\r\n            activity_time_option_menu.place(x=780, y=175)\r\n\r\n            # White list\r\n            un_follow_white_list_frame = Frame(unfollow_frame, bd=5, bg=\"grey\")\r\n            un_follow_white_list_frame.place(x=100, y=275, height=100, width=700)\r\n\r\n            # apply the grid layout\r\n            un_follow_white_list_frame.grid_columnconfigure(0, weight=1)\r\n            un_follow_white_list_frame.grid_rowconfigure(0, weight=1)\r\n\r\n            # create the text widget\r\n            white_list_text = Text(un_follow_white_list_frame, height=10)\r\n            white_list_text.grid(row=0, column=0, sticky='ew')\r\n\r\n            # create a scrollbar widget and set its command to the text widget\r\n            white_list_scrollbar = Scrollbar(un_follow_white_list_frame, orient='vertical',\r\n                                             command=white_list_text.yview)\r\n            white_list_scrollbar.grid(row=0, column=1, sticky='ns')\r\n\r\n            #  communicate back to the scrollbar\r\n            white_list_text['yscrollcommand'] = white_list_scrollbar.set\r\n\r\n            def start_unfollow_bot(event):\r\n                replacemant_value = re.findall(\"\\d+\", replacemant_time_var.get())\r\n                follow_number_value = re.findall(\"\\d+\", follow_number_var.get())\r\n                media_number_value = re.findall(\"\\d+\", media_number_var.get())\r\n                activity_time_value = re.findall(\"\\d+\", activity_time_var.get())\r\n                white_list_value = white_list_text\r\n                a1 = [0, replacemant_value]\r\n                a2 = [0, follow_number_value]\r\n                a3 = [0, media_number_value]\r\n                a4 = [0, activity_time_value]\r\n                if replacemant_check_var.get() == 1:\r\n                    a1[0] = 1\r\n                if account_follower_check_var.get() == 1:\r\n                    a2[0] = 1\r\n                if account_media_check_var.get() == 1:\r\n                    a3[0] = 1\r\n                if account_media_check_var.get() == 1:\r\n                    a4[0] = 1\r\n                tuple_value = (a1, a2, a3, a4)\r\n                print(tuple_value)\r\n                t_unfollow = Thread(target=ig_unfollow, args=(tuple_value, white_list_value))\r\n                t_unfollow.start()\r\n\r\n            start_un_follower_bot_button.bind(\"<Button-1>\", start_unfollow_bot)\r\n\r\n        def direct(event):\r\n            dashboard_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            follow_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            like_dislike_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            direct_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n            unfollow_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            auto_publish_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            # Set titles\r\n\r\n            direct_title_label = Label(direct_frame, text=\"Direct\", bg=\"grey\", fg=\"white\")\r\n            direct_title_label.place(x=0, y=0, height=50, width=100)\r\n\r\n            # Start direct bot\r\n\r\n            start_direct_bot_button = Button(direct_frame, text=\"Start\", command=\"set\")\r\n            start_direct_bot_button.place(x=100, y=0, height=50, width=100)\r\n\r\n            # Save direct options button\r\n\r\n            save_direct_option_button = Button(direct_frame, text=\"Save\", command=\"set\")\r\n            save_direct_option_button.place(x=200, y=0, height=50, width=100)\r\n\r\n            # Options label\r\n            direct_target_label = Label(direct_frame, text=\"Direct target:\", bg=\"grey\", fg=\"white\")\r\n            direct_target_label.place(x=0, y=75, width=900)\r\n            direct_message_label = Label(direct_frame, text=\"Direct message:\", bg=\"grey\", fg=\"white\")\r\n            direct_message_label.place(x=0, y=325, width=900)\r\n\r\n            follower_check_var = IntVar()\r\n            following_check_var = IntVar()\r\n            account_follower_check_var = IntVar()\r\n            account_hashtag_check_var = IntVar()\r\n\r\n            def tick_manage1():\r\n                direct_following_check_button.deselect()\r\n                direct_account_follower_check_button.deselect()\r\n                direct_account_hashtag_check_button.deselect()\r\n\r\n            def tick_manage2():\r\n                direct_follower_check_button.deselect()\r\n                direct_account_follower_check_button.deselect()\r\n                direct_account_hashtag_check_button.deselect()\r\n\r\n            def tick_manage3():\r\n                direct_follower_check_button.deselect()\r\n                direct_following_check_button.deselect()\r\n                direct_account_hashtag_check_button.deselect()\r\n\r\n            def tick_manage4():\r\n                direct_follower_check_button.deselect()\r\n                direct_following_check_button.deselect()\r\n                direct_account_follower_check_button.deselect()\r\n\r\n            direct_follower_check_button = Checkbutton(direct_frame, text=\"Direct your follower\",\r\n                                                       bg=\"white\",\r\n                                                       variable=follower_check_var,\r\n                                                       command=tick_manage1)\r\n            direct_follower_check_button.place(x=25, y=125)\r\n\r\n            direct_following_check_button = Checkbutton(direct_frame, text=\"Direct your following\",\r\n                                                        bg=\"white\",\r\n                                                        variable=following_check_var,\r\n                                                        command=tick_manage2)\r\n            direct_following_check_button.place(x=575, y=125)\r\n\r\n            direct_account_follower_check_button = Checkbutton(direct_frame, text=\"Direct an account follower:\",\r\n                                                               bg=\"white\",\r\n                                                               variable=account_follower_check_var,\r\n                                                               command=tick_manage3)\r\n            direct_account_follower_check_button.place(x=25, y=175)\r\n\r\n            direct_account_hashtag_check_button = Checkbutton(direct_frame, text=\"Direct an account hashtag:\",\r\n                                                              bg=\"white\",\r\n                                                              variable=account_hashtag_check_var,\r\n                                                              command=tick_manage4)\r\n            direct_account_hashtag_check_button.place(x=575, y=175)\r\n\r\n            # ---------------------------------------------------------------------------------------------------------\r\n            # Account text box\r\n            direct_account_frame = Frame(direct_frame, bd=5, bg=\"grey\")\r\n            direct_account_frame.place(x=25, y=200, height=100, width=250)\r\n\r\n            # apply the grid layout\r\n            direct_account_frame.grid_columnconfigure(0, weight=1)\r\n            direct_account_frame.grid_rowconfigure(0, weight=1)\r\n\r\n            # create the text widget\r\n            account_text = Text(direct_account_frame, height=10)\r\n            account_text.grid(row=0, column=0, sticky='ew')\r\n\r\n            # create a scrollbar widget and set its command to the text widget\r\n            direct_account_scrollbar = Scrollbar(direct_account_frame, orient='vertical',\r\n                                                 command=account_text.yview)\r\n            direct_account_scrollbar.grid(row=0, column=1, sticky='ns')\r\n\r\n            #  communicate back to the scrollbar\r\n            account_text['yscrollcommand'] = direct_account_scrollbar.set\r\n\r\n            # ---------------------------------------------------------------------------------------------------------\r\n            # Account text box\r\n            direct_hashtag_frame = Frame(direct_frame, bd=5, bg=\"grey\")\r\n            direct_hashtag_frame.place(x=575, y=200, height=100, width=250)\r\n\r\n            # apply the grid layout\r\n            direct_hashtag_frame.grid_columnconfigure(0, weight=1)\r\n            direct_hashtag_frame.grid_rowconfigure(0, weight=1)\r\n\r\n            # create the text widget\r\n            hashtag_text = Text(direct_hashtag_frame, height=10)\r\n            hashtag_text.grid(row=0, column=0, sticky='ew')\r\n\r\n            # create a scrollbar widget and set its command to the text widget\r\n            direct_hashtag_scrollbar = Scrollbar(direct_hashtag_frame, orient='vertical',\r\n                                                 command=account_text.yview)\r\n            direct_hashtag_scrollbar.grid(row=0, column=1, sticky='ns')\r\n\r\n            #  communicate back to the scrollbar\r\n            hashtag_text['yscrollcommand'] = direct_hashtag_scrollbar.set\r\n\r\n            # ---------------------------------------------------------------------------------------------------------\r\n            # Message box\r\n            direct_message_frame = Frame(direct_frame, bd=5, bg=\"grey\")\r\n            direct_message_frame.place(x=100, y=375, height=100, width=700)\r\n\r\n            # apply the grid layout\r\n            direct_message_frame.grid_columnconfigure(0, weight=1)\r\n            direct_message_frame.grid_rowconfigure(0, weight=1)\r\n\r\n            # create the text widget\r\n            message_text = Text(direct_message_frame, height=10)\r\n            message_text.grid(row=0, column=0, sticky='ew')\r\n\r\n            # create a scrollbar widget and set its command to the text widget\r\n            message_scrollbar = Scrollbar(direct_message_frame, orient='vertical',\r\n                                          command=message_text.yview)\r\n            message_scrollbar.grid(row=0, column=1, sticky='ns')\r\n\r\n            #  communicate back to the scrollbar\r\n            message_text['yscrollcommand'] = message_scrollbar.set\r\n\r\n            def start_direct_bot(event):\r\n                account_follower_value = account_text.get(1.0, \"end-1c\")\r\n                account_follower_value = account_follower_value.split(' ')\r\n                account_hashtag_value = hashtag_text.get(1.0, \"end-1c\")\r\n                account_hashtag_value = account_hashtag_value.split(' ')\r\n                direct_message_value = message_text\r\n                a1 = [0]\r\n                a2 = [0]\r\n                a3 = [0, account_follower_value]\r\n                a4 = [0, account_hashtag_value]\r\n                if follower_check_var.get() == 1:\r\n                    a1[0] = 1\r\n                if following_check_var.get() == 1:\r\n                    a2[0] = 1\r\n                if account_follower_check_var.get() == 1:\r\n                    a3[0] = 1\r\n                if account_hashtag_check_var.get() == 1:\r\n                    a4[0] = 1\r\n                tuple_value = (a1, a2, a3, a4)\r\n                print(tuple_value)\r\n                t_direct = Thread(target=ig_direct, args=(tuple_value, direct_message_value))\r\n                t_direct.start()\r\n\r\n            start_direct_bot_button.bind(\"<Button-1>\", start_direct_bot)\r\n\r\n        def like_dislike(event):\r\n\r\n            dashboard_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            follow_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            like_dislike_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n            direct_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            unfollow_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            auto_publish_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            # Set Titles\r\n            likes_label = Label(like_dislike_frame, text=\"Like\", bg=\"steelblue\", fg=\"white\")\r\n            likes_label.place(x=0, y=0, height=50, width=100)\r\n\r\n            # Start likes bot\r\n            start_likes_bot_button = Button(like_dislike_frame, text=\"Start\", command=\"set\")\r\n            start_likes_bot_button.place(x=100, y=0, height=50, width=100)\r\n\r\n            # Save likes option button\r\n            save_likes_options_button = Button(like_dislike_frame, text=\"Save\", command=\"set\")\r\n            save_likes_options_button.place(x=200, y=0, height=50, width=100)\r\n\r\n            hashtag = IntVar()\r\n            location_check = IntVar()\r\n            account = IntVar()\r\n\r\n            def hashtag_button():\r\n                if hashtag.get() == 1:\r\n                    hashtag_check_button[\"bg\"] = \"green\"\r\n                if hashtag.get() == 0:\r\n                    hashtag_check_button[\"bg\"] = \"steelblue\"\r\n\r\n            def location_button():\r\n                if location_check.get() == 1:\r\n                    location_check_button[\"bg\"] = \"green\"\r\n                if location_check.get() == 0:\r\n                    location_check_button[\"bg\"] = \"steelblue\"\r\n\r\n            def account_button():\r\n                if account.get() == 1:\r\n                    account_check_button[\"bg\"] = \"green\"\r\n                if account.get() == 0:\r\n                    account_check_button[\"bg\"] = \"steelblue\"\r\n\r\n            hashtag_check_button = Checkbutton(like_dislike_frame, text=\"Likes by hashtag\", bg=\"steelblue\",\r\n                                               variable=hashtag, command=hashtag_button)\r\n            hashtag_check_button.place(x=10, y=75, width=900)\r\n\r\n            location_check_button = Checkbutton(like_dislike_frame, text=\"Likes by location\", bg=\"steelblue\",\r\n                                                variable=location_check, command=location_button)\r\n            location_check_button.place(x=10, y=275, width=900)\r\n\r\n            account_check_button = Checkbutton(like_dislike_frame, text=\"Likes by account\", bg=\"steelblue\",\r\n                                               variable=account, command=account_button)\r\n            account_check_button.place(x=10, y=400, width=900)\r\n\r\n            # Set likes by hashtag\r\n            hashtag_likes_label = Label(like_dislike_frame, text=\"Enter hashtag\", bg=\"whitesmoke\")\r\n            hashtag_likes_label.place(x=20, y=100, height=50, width=100)\r\n\r\n            hashtag_likes_frame = Frame(like_dislike_frame, bd=5, bg=\"silver\")\r\n            hashtag_likes_frame.place(x=20, y=140, height=100, width=700)\r\n\r\n            hashtag_likes_frame.grid_columnconfigure(0, weight=1)\r\n            hashtag_likes_frame.grid_rowconfigure(0, weight=1)\r\n\r\n            hashtag_text = Text(hashtag_likes_frame, height=10)\r\n            hashtag_text.grid(row=0, column=0, sticky=\"ew\")\r\n\r\n            # Create a scrollbar for the hashtag text\r\n            hashtag_scrollbar = Scrollbar(hashtag_likes_frame, orient=\"vertical\", command=hashtag_text.yview)\r\n            hashtag_scrollbar.grid(row=0, column=1, sticky=\"ns\")\r\n\r\n            hashtag_text['yscrollcommand'] = hashtag_scrollbar.set\r\n\r\n            # Set likes by account\r\n            account_likes_label = Label(like_dislike_frame, text=\"Enter account\")\r\n            account_likes_label.place(x=20, y=425, height=50, width=100)\r\n\r\n            account_likes_frame = Frame(like_dislike_frame, bd=5, bg=\"silver\")\r\n            account_likes_frame.place(x=20, y=465, height=100, width=700)\r\n\r\n            account_likes_frame.grid_columnconfigure(0, weight=1)\r\n            account_likes_frame.grid_rowconfigure(0, weight=1)\r\n\r\n            account_text = Text(account_likes_frame, height=10)\r\n            account_text.grid(row=0, column=0, sticky=\"ew\")\r\n\r\n            # Create a scrollbar for the account text\r\n            account_scrollbar = Scrollbar(account_likes_frame, orient=\"vertical\", command=account_text.yview)\r\n            account_scrollbar.grid(row=0, column=1, sticky=\"ns\")\r\n\r\n            account_text['yscrollcommand'] = account_scrollbar.set\r\n\r\n            # Set likes by location\r\n            location_likes_label = Label(like_dislike_frame, text=\"Enter the position you prefer\")\r\n            location_likes_label.place(x=20, y=300, height=50, width=200)\r\n\r\n            location_likes_frame = Frame(like_dislike_frame, bd=5, bg=\"silver\")\r\n            location_likes_frame.place(x=20, y=345, height=50, width=700)\r\n\r\n            location_likes_frame.grid_columnconfigure(0, weight=1)\r\n            location_likes_frame.grid_rowconfigure(0, weight=1)\r\n\r\n            location_text = Text(location_likes_frame, height=10)\r\n            location_text.grid(row=0, column=0, sticky=\"ew\")\r\n\r\n            location_scrollbar = Scrollbar(location_likes_frame, orient=\"vertical\", command=location_text.yview)\r\n            location_scrollbar.grid(row=0, column=1, sticky=\"ns\")\r\n\r\n            location_text['yscrollcommand'] = location_scrollbar.set\r\n\r\n        def follow(event):\r\n\r\n            dashboard_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            follow_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n            like_dislike_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            direct_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            unfollow_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            auto_publish_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n            # Set titles\r\n\r\n            follow_label = Label(follow_frame, text=\"Follow\", bg=\"grey\", fg=\"white\")\r\n            follow_label.place(x=0, y=0, height=50, width=100)\r\n\r\n            # set options\r\n\r\n            # Start follower bot\r\n\r\n            start_follower_bot_button = Button(follow_frame, text=\"Start\", command=\"set\")\r\n            start_follower_bot_button.place(x=100, y=0, height=50, width=100)\r\n\r\n            # Save follower options button\r\n\r\n            save_follower_option_button = Button(follow_frame, text=\"Save\", command=\"set\")\r\n            save_follower_option_button.place(x=200, y=0, height=50, width=100)\r\n\r\n            hashtag_check_var = IntVar()\r\n            location_check_var = IntVar()\r\n            account_check_var = IntVar()\r\n\r\n            def hashtag_options():\r\n                if hashtag_check_var.get() == 1:\r\n                    follow_by_hashtag_check_button[\"bg\"] = \"green\"\r\n                if hashtag_check_var.get() == 0:\r\n                    follow_by_hashtag_check_button[\"bg\"] = \"grey\"\r\n\r\n            def location_option():\r\n                if location_check_var.get() == 1:\r\n                    follow_by_location_check_button[\"bg\"] = \"green\"\r\n                if location_check_var.get() == 0:\r\n                    follow_by_location_check_button[\"bg\"] = \"grey\"\r\n\r\n            def account_options():\r\n                if account_check_var.get() == 1:\r\n                    follow_by_account_check_button[\"bg\"] = \"green\"\r\n                if account_check_var.get() == 0:\r\n                    follow_by_account_check_button[\"bg\"] = \"grey\"\r\n\r\n            follow_by_hashtag_check_button = Checkbutton(follow_frame, text=\"Follow by hashtag:\", bg=\"grey\",\r\n                                                         variable=hashtag_check_var, command=hashtag_options)\r\n            follow_by_hashtag_check_button.place(x=10, y=75, width=900)\r\n\r\n            follow_by_location_check_button = Checkbutton(follow_frame, text=\"Follow by location:\", bg=\"grey\",\r\n                                                          variable=location_check_var, command=location_option)\r\n            follow_by_location_check_button.place(x=10, y=275, width=900)\r\n\r\n            follow_by_account_check_button = Checkbutton(follow_frame, text=\"Follow by account:\", bg=\"grey\",\r\n                                                         variable=account_check_var, command=account_options)\r\n            follow_by_account_check_button.place(x=10, y=400, width=900)\r\n\r\n            # Follow by hashtag options\r\n\r\n            hashtag_follow_label = Label(follow_frame, text=\"Insert hashtag:\")\r\n            hashtag_follow_label.place(x=20, y=100, height=50, width=100)\r\n\r\n            hashtag_follow_frame = Frame(follow_frame, bd=5, bg=\"grey\")\r\n            hashtag_follow_frame.place(x=20, y=140, height=100, width=700)\r\n\r\n            # apply the grid layout\r\n            hashtag_follow_frame.grid_columnconfigure(0, weight=1)\r\n            hashtag_follow_frame.grid_rowconfigure(0, weight=1)\r\n\r\n            # create the text widget\r\n            text = Text(hashtag_follow_frame, height=10)\r\n            text.grid(row=0, column=0, sticky='ew')\r\n\r\n            # create a scrollbar widget and set its command to the text widget\r\n            scrollbar = Scrollbar(hashtag_follow_frame, orient='vertical', command=text.yview)\r\n            scrollbar.grid(row=0, column=1, sticky='ns')\r\n\r\n            #  communicate back to the scrollbar\r\n            text['yscrollcommand'] = scrollbar.set\r\n\r\n            # Follow by location option\r\n\r\n            country_check_var = IntVar()\r\n            region_check_var = IntVar()\r\n            city_check_var = IntVar()\r\n\r\n            def country_options():\r\n                if country_check_var.get() == 1:\r\n                    location_country_follow_check_button[\"bg\"] = \"green\"\r\n                if country_check_var.get() == 0:\r\n                    location_country_follow_check_button[\"bg\"] = \"grey\"\r\n\r\n            def region_option():\r\n                if region_check_var.get() == 1:\r\n                    location_region_follow_check_button[\"bg\"] = \"green\"\r\n                if region_check_var.get() == 0:\r\n                    location_region_follow_check_button[\"bg\"] = \"grey\"\r\n\r\n            def city_options():\r\n                if city_check_var.get() == 1:\r\n                    location_city_follow_check_button[\"bg\"] = \"green\"\r\n                if city_check_var.get() == 0:\r\n                    location_city_follow_check_button[\"bg\"] = \"grey\"\r\n\r\n            location_country_follow_check_button = Checkbutton(follow_frame, text=\"Follow by country:\", bg=\"grey\",\r\n                                                               variable=country_check_var, command=country_options)\r\n            location_country_follow_check_button.place(x=70, y=330, width=175)\r\n\r\n            country = [\r\n                \"-------\",\r\n                \"Albania\",\r\n                \"Andorra\",\r\n                \"Armenia\",\r\n                \"Austria\",\r\n                \"Azerbaigian\",\r\n                \"Bielorussia\",\r\n                \"Belgio\",\r\n                \"Bosnia\",\r\n                \"Cipro\",\r\n                \"Croazia\",\r\n                \"Danimarca\",\r\n                \"Estonia\",\r\n                \"Francia\",\r\n                \"Georgia\",\r\n                \"Germania\",\r\n                \"Grecia\",\r\n                \"Italia\",\r\n                \"Irlanda\",\r\n                \"Islanda\",\r\n                \"Lettonia\",\r\n                \"Liechtenstein\",\r\n                \"Lituania\",\r\n                \"Lussemburgo\",\r\n                \"Malta\",\r\n                \"Moldavia\",\r\n                \"Monaco\",\r\n                \"Montenegro\",\r\n                \"Norvegia\",\r\n                \"Paesi Bassi\",\r\n                \"Polonia\",\r\n                \"Portogallo\",\r\n                \"Regno Unito\",\r\n                \"Repubblica ceca\",\r\n                \"Romania\",\r\n                \"Russia\",\r\n                \"San Marino\",\r\n                \"Serbia\",\r\n                \"Slovacchia\",\r\n                \"Slovenia\",\r\n                \"Spagna\",\r\n                \"Svezia\",\r\n                \"Svizzera\",\r\n                \"Turchia\",\r\n                \"Ucraina\",\r\n                \"Ungheria\",\r\n\r\n            ]  # etc\r\n\r\n            variable1 = StringVar(follow_frame)\r\n            variable1.set(country[0])  # default value\r\n\r\n            w1 = OptionMenu(follow_frame, variable1, *country)\r\n            w1.place(x=70, y=350, width=175)\r\n\r\n            #  communicate back to the scrollbar\r\n            text['yscrollcommand'] = scrollbar.set\r\n\r\n            location_region_follow_check_button = Checkbutton(follow_frame, text=\"Follow by region:\", bg=\"grey\",\r\n                                                              variable=region_check_var, command=region_option)\r\n            location_region_follow_check_button.place(x=356, y=330, width=175)\r\n\r\n            region = [\r\n                \"-------\",\r\n                \"Valle d’Aosta\",\r\n                \"Piemonte\",\r\n                \"Liguria\",\r\n                \"Lombardia\",\r\n                \"Trentino Alto Adige*\",\r\n                \"Veneto\",\r\n                \"Friuli-Venezia Giulia\",\r\n                \"Emilia-Romagna\",\r\n                \"Toscana\",\r\n                \"Umbria\",\r\n                \"Marche\",\r\n                \"Lazio\",\r\n                \"Abruzzo\",\r\n                \"Molise\",\r\n                \"Campania\",\r\n                \"Puglia\",\r\n                \"Basilicata\",\r\n                \"Calabria\",\r\n                \"Sicilia\",\r\n                \"Sardegna\",\r\n            ]  # etc\r\n\r\n            variable2 = StringVar(follow_frame)\r\n            variable2.set(region[0])  # default value\r\n\r\n            w2 = OptionMenu(follow_frame, variable2, *region)\r\n            w2.place(x=356, y=350, width=175)\r\n\r\n            #  communicate back to the scrollbar\r\n            text['yscrollcommand'] = scrollbar.set\r\n\r\n            location_city_follow_check_button = Checkbutton(follow_frame, text=\"Follow by city:\", bg=\"grey\",\r\n                                                            variable=city_check_var, command=city_options)\r\n            location_city_follow_check_button.place(x=642, y=330, width=175)\r\n\r\n            city = [\r\n                \"-------\",\r\n                \"Bologna\",\r\n                \"Ferrara\",\r\n                \"Forlì-Cesena\",\r\n                \"Modena\",\r\n                \"Parma\",\r\n                \"Piacenza\",\r\n                \"Ravenna\",\r\n                \"Reggio Emilia\",\r\n                \"Rimini\",\r\n            ]  # etc\r\n\r\n            variable3 = StringVar(follow_frame)\r\n            variable3.set(city[0])  # default value\r\n\r\n            w3 = OptionMenu(follow_frame, variable3, *city)\r\n            w3.place(x=642, y=350, width=175)\r\n\r\n            #  communicate back to the scrollbar\r\n            text['yscrollcommand'] = scrollbar.set\r\n\r\n            # Follow by account\r\n\r\n            account_follow_label = Label(follow_frame, text=\"Insert account:\")\r\n            account_follow_label.place(x=20, y=425, height=50, width=100)\r\n\r\n            account_follow_frame = Frame(follow_frame, bd=5, bg=\"grey\")\r\n            account_follow_frame.place(x=20, y=465, height=100, width=700)\r\n\r\n            # apply the grid layout\r\n            account_follow_frame.grid_columnconfigure(0, weight=1)\r\n            account_follow_frame.grid_rowconfigure(0, weight=1)\r\n\r\n            # create the text widget\r\n            text1 = Text(account_follow_frame, height=10)\r\n            text1.grid(row=0, column=0, sticky='ew')\r\n\r\n            # create a scrollbar widget and set its command to the text widget\r\n            scrollbar1 = Scrollbar(account_follow_frame, orient='vertical', command=text1.yview)\r\n            scrollbar1.grid(row=0, column=1, sticky='ns')\r\n\r\n            #  communicate back to the scrollbar\r\n            text1['yscrollcommand'] = scrollbar1.set\r\n\r\n            def start_follow_bot(event):\r\n\r\n                # Follow by hashtag:\r\n                if hashtag_check_var == 1:\r\n                    hashtags = text.get(1.0, \"end-1c\")\r\n                    hashtags = hashtags.split(' ')\r\n                    if hashtags:\r\n                        t_follow_hashtag = Thread(target=ig_follow_hashtag, args=(hashtags,))\r\n                        t_follow_hashtag.start()\r\n                # Follow by location\r\n                if location_check_var == 1:\r\n                    locations = variable1\r\n                    if locations:\r\n                        t_follow_location = Thread(target=ig_follow_location, args=(locations,))\r\n                        t_follow_location.start()\r\n                # Follow by account\r\n                if account_check_var == 1:\r\n                    print(account_check_var)\r\n                    accounts = text1.get(1.0, \"end-1c\")\r\n                    accounts = accounts.split(',')\r\n                    if accounts:\r\n                        t_follow_account = Thread(target=ig_follow_account, args=(accounts,))\r\n                        t_follow_account.start()\r\n\r\n            start_follower_bot_button.bind(\"<Button-1>\", start_follow_bot)\r\n\r\n        def dashboard(event):\r\n\r\n            f = open(\"Credenziali\", \"r\")\r\n            credential = f.read()\r\n            f.close()\r\n\r\n            def getProxies():\r\n                r = requests.get('https://free-proxy-list.net/')\r\n                soup = BeautifulSoup(r.content, 'html.parser')\r\n                table = soup.find('tbody')\r\n                proxies = []\r\n                for row in table:\r\n                    if row.find_all('td')[4].text == 'elite proxy':\r\n                        proxy = ':'.join([row.find_all('td')[0].text, row.find_all('td')[1].text])\r\n                        proxies.append(proxy)\r\n                    else:\r\n                        pass\r\n                return proxies\r\n\r\n            if self.is_login == 1:\r\n                dashboard_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n                follow_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n                like_dislike_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n                direct_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n                unfollow_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n                auto_publish_frame.place(x=300, y=0, height=0, width=0)\r\n\r\n                # Set titles\r\n\r\n                dashboard_label = Label(dashboard_frame, text=\"Dashboard\", bg=\"grey\", fg=\"white\")\r\n                dashboard_label.place(x=0, y=0, height=50, width=100)\r\n\r\n                # Logout\r\n                logout_button = Button(dashboard_frame, text=\"Logout\", command=\"set\")\r\n                logout_button.place(x=100, y=0, height=50, width=100)\r\n                f = open(\"Credenziali\", \"r\")\r\n                username = f.readline()\r\n                f.close()\r\n                account_text = \"Actually account: \" + str(username)\r\n                print(account_text)\r\n                dashboard_label = Label(dashboard_frame, text=account_text, bg=\"grey\", fg=\"white\")\r\n                dashboard_label.place(x=225, y=0, height=50)\r\n                statistics_label = Label(dashboard_frame, text=\"Statistics:\", bg=\"grey\", fg=\"white\")\r\n                statistics_label.place(x=0, y=75, width=900)\r\n\r\n                # Actually account:\r\n                def logout(event):\r\n                    t_logout = Thread(target=ig_logout)\r\n                    t_logout.start()\r\n                    self.is_login = 0\r\n                    dashboard(0)\r\n\r\n                logout_button.bind(\"<Button-1>\", logout)\r\n\r\n            else:\r\n                # Login with ig credential in a file\r\n                dashboard_frame.place(x=300, y=0, height=0, width=0)\r\n                # Create instagram login frame\r\n                instagram_background_login_frame = Frame(self.root, bd=5, bg=\"white\")\r\n                instagram_background_login_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n                # Set title of login frame\r\n                instagram_login_frame_title = Label(instagram_background_login_frame,\r\n                                                    text=\"Login in corso:\",\r\n                                                    bg=\"white\")\r\n                instagram_login_frame_title.place(x=400, y=250)\r\n\r\n                background_progress = ttk.Progressbar(instagram_background_login_frame, orient=HORIZONTAL,\r\n                                                      length=100, mode='determinate', )\r\n                background_progress.place(x=400, y=275)\r\n                background_progress['value'] = 0\r\n\r\n                def progress_control():\r\n                    for a in range(100):\r\n                        background_progress['value'] = a\r\n                        time.sleep(0.01)\r\n                    ig_background_login_check()\r\n\r\n                t_bk_pb = Thread(target=progress_control)\r\n                t_bk_pb.start()\r\n                var1 = 0\r\n                proxy_list1 = getProxies()\r\n                t1_bk_login = Thread(target=ig_login, args=(proxy_list1, \"\", \"\", var1))\r\n                t1_bk_login.start()\r\n\r\n                def ig_background_login_check():\r\n                    background_progress.destroy()\r\n                    log_file_str = os.listdir(\r\n                        r\"C:\\Users\\39377\\Desktop\\InstaBot\\config\\log\")\r\n                    log_file = open(r\"C:\\Users\\39377\\Desktop\\InstaBot\\config\\log\\\\\"\r\n                                    + log_file_str[0], \"r\")\r\n                    ll = StringVar\r\n                    for last_line in log_file:\r\n                        ll = last_line\r\n                        pass\r\n                    if \"Username or password is incorrect\" in ll:\r\n                        messagebox.showinfo(\"Login fail\", \"Username or password wrong\")\r\n                        dashboard(0)\r\n                    if \"too many requests\" in ll:\r\n                        messagebox.showinfo(\"Login fail\", \"To many request from instagram, wait 5 minutes\")\r\n                        dashboard(0)\r\n                    self.is_login = 1\r\n                    instagram_background_login_frame.destroy()\r\n                    dashboard(0)\r\n\r\n                # ----------------------------------------------------------------------------------------------------\r\n                # Login with a request of ig credential\r\n                if credential == \"\":\r\n                    print(\"maaaa\")\r\n                    dashboard_frame.place(x=300, y=0, height=0, width=0)\r\n                    # Create instagram login frame\r\n                    instagram_login_frame = Frame(self.root, bd=5, bg=\"white\")\r\n                    instagram_login_frame.place(x=300, y=0, height=600, width=900)\r\n\r\n                    # Set title of login frame\r\n                    instagram_login_frame_title = Label(instagram_login_frame,\r\n                                                        text=\"Prima di accedere alle funzionalità \"\r\n                                                             \"di giudoinstabot accedi al profilo\"\r\n                                                             \" instagram che vuoi gestire: \",\r\n                                                        bg=\"white\")\r\n                    instagram_login_frame_title.place(x=0, y=30)\r\n\r\n                    # Insertion box Email & password\r\n\r\n                    instagram_username_label = Label(instagram_login_frame, text=\"Username\", bg=\"white\")\r\n                    instagram_username_label.place(x=0, y=85, height=50, width=150)\r\n                    instagram_password_label = Label(instagram_login_frame, text=\"Password\", bg=\"white\")\r\n                    instagram_password_label.place(x=0, y=136, height=50, width=150)\r\n\r\n                    instagram_username_entry = Entry(instagram_login_frame, bg=\"yellow\")\r\n                    instagram_username_entry.place(x=175, y=85, height=50, width=240)\r\n                    instagram_password_entry = Entry(instagram_login_frame, bg=\"yellow\", show=\"*\")\r\n                    instagram_password_entry.place(x=175, y=135, height=50, width=240)\r\n\r\n                    check_var1 = IntVar()\r\n\r\n                    def show_password():\r\n                        if check_var1.get() == 1:\r\n                            instagram_password_entry[\"show\"] = \"\"\r\n                        if check_var1.get() == 0:\r\n                            instagram_password_entry[\"show\"] = \"*\"\r\n\r\n                    instagram_password_check_box = Checkbutton(instagram_login_frame, text=\"show password\",\r\n                                                               variable=check_var1, command=show_password)\r\n\r\n                    instagram_access_button = Button(instagram_login_frame, text=\"Login\", command=\"set\")\r\n                    instagram_access_button.place(x=0, y=195, height=50, width=150)\r\n\r\n                    # Access management\r\n\r\n                    def access_try(event):\r\n                        username_text = instagram_username_entry.get()\r\n                        password_text = instagram_password_entry.get()\r\n                        print(username_text)\r\n                        print(password_text)\r\n                        if username_text and password_text:\r\n                            proxy_list1 = getProxies()\r\n                            instagram_access_button.destroy()\r\n                            instagram_info_label = Label(instagram_login_frame, text=\"Login in process: \",\r\n                                                         bg=\"white\")\r\n                            instagram_info_label.place(x=0, y=195, height=50, width=150)\r\n                            progress = ttk.Progressbar(instagram_login_frame, orient=HORIZONTAL,\r\n                                                       length=100, mode='determinate', )\r\n                            progress.place(x=175, y=215)\r\n                            progress['value'] = 0\r\n\r\n                            def progress_control():\r\n                                for a in range(100):\r\n                                    progress['value'] = a\r\n                                    time.sleep(0.3)\r\n                                ig_login_check()\r\n\r\n                            t_pb = Thread(target=progress_control)\r\n                            t_pb.start()\r\n                            var1 = 1\r\n\r\n                            t1_login = Thread(target=ig_login,\r\n                                              args=(proxy_list1, username_text, password_text, var1))\r\n                            t1_login.start()\r\n\r\n                            def ig_login_check():\r\n                                progress.destroy()\r\n                                log_file_str = os.listdir(\r\n                                    r\"C:\\Users\\39377\\Desktop\\InstaBot\\config\\log\")\r\n                                log_file = open(r\"C:\\Users\\39377\\Desktop\\InstaBot\\config\\log\\\\\"\r\n                                                + log_file_str[0], \"r\")\r\n                                ll = StringVar\r\n                                for last_line in log_file:\r\n                                    ll = last_line\r\n                                    pass\r\n                                if \"Username or password is incorrect\" in ll:\r\n                                    messagebox.showinfo(\"Login fail\", \"Username or password wrong\")\r\n                                    dashboard(0)\r\n                                if \"too many requests\" in ll:\r\n                                    messagebox.showinfo(\"Login fail\",\r\n                                                        \"To many request from instagram, wait 5 minutes\")\r\n                                    dashboard(0)\r\n                                self.is_login = 1\r\n                                instagram_login_frame.destroy()\r\n                                dashboard(0)\r\n\r\n                    instagram_access_button.bind(\"<Button-1>\", access_try)\r\n\r\n        auto_publish_button.bind(\"<Button-1>\", auto_publish)\r\n        unfollow_button.bind(\"<Button-1>\", unfollow)\r\n        direct_button.bind(\"<Button-1>\", direct)\r\n        l_d_button.bind(\"<Button-1>\", like_dislike)\r\n        follow_button.bind(\"<Button-1>\", follow)\r\n        dashboard_button.bind(\"<Button-1>\", dashboard)\r\n\r\n        dashboard(0)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MainPage.py b/MainPage.py
--- a/MainPage.py	(revision 3f04b4ce130e1cdb5afdfd86754d240832307434)
+++ b/MainPage.py	(date 1638907771083)
@@ -3,6 +3,7 @@
 if os.path.isfile("path/to/config/file.json"):
     os.remove("path/to/config/file.json")
 
+import threading
 from tkinter import *
 from tkcalendar import *
 from tkinter import filedialog
@@ -10,13 +11,13 @@
 from tkinter import ttk
 from threading import Thread
 from BOT_Manager import *
-import requests
-from bs4 import BeautifulSoup
 from tkinter import messagebox
 import re
-import threading
 import csv
 from datetime import datetime
+from PIL import Image, ImageTk
+from matplotlib.figure import Figure
+from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
 
 
 class MainPage:
@@ -144,9 +145,14 @@
             # Set view files selected
             table = ttk.Treeview(auto_publish_frame)
             table.place(x=0, y=285, height=150, width=350)
-            table_scroll = ttk.Scrollbar(auto_publish_frame, orient="vertical", command=table.yview)
-            table_scroll.place(x=350, y=285, height=150)
-            table.configure(yscrollcommand=table_scroll.set)
+
+            table_scroll_y = ttk.Scrollbar(auto_publish_frame, orient="vertical", command=table.yview)
+            table_scroll_y.place(x=350, y=285, height=150)
+            table.configure(yscrollcommand=table_scroll_y.set)
+
+            table_scroll_x = ttk.Scrollbar(auto_publish_frame, orient="horizontal", command=table.xview)
+            table_scroll_x.place(x=0, y=435, width=350)
+            table.configure(xscrollcommand=table_scroll_x.set)
 
             table['columns'] = ('File', 'Datetime')
 
@@ -175,7 +181,7 @@
                             my_file.write(line)
 
             remove = Button(auto_publish_frame, text="Remove", command=remove_file)
-            remove.place(x=380, y=285, height=50, width=150)
+            remove.place(x=0, y=470, height=50, width=100)
 
             # Sort column
             def tree_view_sort_column(tv, col):
@@ -187,10 +193,10 @@
 
             # Set Enter the caption
             caption_label = Label(auto_publish_frame, text="Enter the caption", bg="whitesmoke")
-            caption_label.place(x=580, y=285, height=50, width=100)
+            caption_label.place(x=450, y=285, height=50, width=100)
 
             caption_frame = Frame(auto_publish_frame, bd=5, bg="silver")
-            caption_frame.place(x=580, y=325, height=110, width=300)
+            caption_frame.place(x=450, y=325, height=110, width=400)
             caption_frame.grid_columnconfigure(0, weight=1)
             caption_frame.grid_rowconfigure(0, weight=1)
 
@@ -224,6 +230,8 @@
                             tree_view_sort_column(table, "Datetime")
                             with open("File photo.txt", "a") as my_file:
                                 my_file.write(name_file + ", " + date_time + "\n")
+                            messagebox.showinfo(title='INFO',
+                                                message='Do not delete or move the file to your computer, it could cause an error!')
                         else:
                             messagebox.showerror(title='ERROR', message='Select date and time')
                     else:
@@ -231,7 +239,7 @@
 
             choose_file_button = Button(auto_publish_frame, text="Choose file", command=choose_file,
                                         bg="whitesmoke")
-            choose_file_button.place(x=230, y=0, height=50, width=100)
+            choose_file_button.place(x=200, y=0, height=50, width=100)
 
             # Search for files by comparing dates to upload
             def search_file():
@@ -288,10 +296,22 @@
 
             # Set save and load button
             save_button = Button(auto_publish_frame, text="Save", command=save_options)
-            save_button.place(x=350, y=0, height=50, width=100)
+            save_button.place(x=300, y=0, height=50, width=100)
 
             load_button = Button(auto_publish_frame, text='Load', command=load_options)
-            load_button.place(x=500, y=0, height=50, width=100)
+            load_button.place(x=400, y=0, height=50, width=100)
+
+            # Function set to view image
+            def view_file():
+                global item_text
+
+                for item in table.selection():
+                    item_text = table.item(item, 'values')[0]
+                im = Image.open(item_text)
+                im.show()
+
+            view_button = Button(auto_publish_frame, text='View', command=view_file)
+            view_button.place(x=150, y=470, height=50, width=100)
 
         def unfollow(event):
             dashboard_frame.place(x=300, y=0, height=0, width=0)
@@ -321,6 +341,9 @@
             save_un_follower_option_button = Button(unfollow_frame, text="Save", command="set")
             save_un_follower_option_button.place(x=200, y=0, height=50, width=100)
 
+            upload_un_follower_option_button = Button(unfollow_frame, text="Upload", command="set")
+            upload_un_follower_option_button.place(x=300, y=0, height=50, width=100)
+
             # Options label
             un_follow_label = Label(unfollow_frame, text="Unfollow target:", bg="grey", fg="white")
             un_follow_label.place(x=0, y=75, width=900)
@@ -494,11 +517,42 @@
                 if account_media_check_var.get() == 1:
                     a4[0] = 1
                 tuple_value = (a1, a2, a3, a4)
-                print(tuple_value)
-                t_unfollow = Thread(target=ig_unfollow, args=(tuple_value, white_list_value))
-                t_unfollow.start()
+                if start_un_follower_bot_button["text"] == "Start":
+                    start_un_follower_bot_button["text"] = "Stop"
+                    t_unfollow = Thread(target=ig_unfollow, args=(tuple_value, white_list_value))
+                    t_unfollow.start()
+                else:
+                    start_un_follower_bot_button["text"] = "Stop"
+                    unfollow_stp(1)
+                    unfollow_stp(2)
+
+            def save_unfollow_options(event):
+                dir = r"C:\Users\39377\Desktop\InstaBot\data options\unfollow_options"
+                saved_file = open(dir, "w")
+
+                saved_file.write(str(replacemant_time_var.get()) + ":")
+                saved_file.write(str(follow_number_var.get()) + ":")
+                saved_file.write(str(media_number_var.get()) + ":")
+                saved_file.write(str(activity_time_var.get()) + ":")
+                saved_file.write(white_list_text.get(1.0, "end-1c") + ":")
+
+                saved_file.close()
+
+            def upload_unfollow_options(event):
+                dir = r"C:\Users\39377\Desktop\InstaBot\data options\unfollow_options"
+                saved_file = open(dir, "r")
+                data = saved_file.read()
+                data_split = data.split(":")
+                replacemant_time_var.set(data_split[0])
+                follow_number_var.set(data_split[1])
+                media_number_var.set(data_split[2])
+                activity_time_var.set(data_split[3])
+                white_list_text.insert("1.0", data_split[4])
+                saved_file.close()
 
             start_un_follower_bot_button.bind("<Button-1>", start_unfollow_bot)
+            save_un_follower_option_button.bind("<Button-1>", save_unfollow_options)
+            upload_un_follower_option_button.bind("<Button-1>", upload_unfollow_options)
 
         def direct(event):
             dashboard_frame.place(x=300, y=0, height=0, width=0)
@@ -527,6 +581,8 @@
 
             save_direct_option_button = Button(direct_frame, text="Save", command="set")
             save_direct_option_button.place(x=200, y=0, height=50, width=100)
+            upload_direct_option_button = Button(direct_frame, text="Upload", command="set")
+            upload_direct_option_button.place(x=300, y=0, height=50, width=100)
 
             # Options label
             direct_target_label = Label(direct_frame, text="Direct target:", bg="grey", fg="white")
@@ -669,7 +725,29 @@
                 t_direct = Thread(target=ig_direct, args=(tuple_value, direct_message_value))
                 t_direct.start()
 
+            def save_direct_options(event):
+                dir = r"C:\Users\39377\Desktop\InstaBot\data options\direct_options"
+                saved_file = open(dir, "w").close()
+                saved_file = open(dir, "w")
+                saved_file.write(account_text.get(1.0, "end-1c") + ":")
+                saved_file.write(hashtag_text.get(1.0, "end-1c") + ":")
+                saved_file.write(message_text.get(1.0, "end-1c") + ":")
+
+                saved_file.close()
+
+            def upload_direct_options(event):
+                dir = r"C:\Users\39377\Desktop\InstaBot\data options\direct_options"
+                saved_file = open(dir, "r")
+                data = saved_file.read()
+                data_split = data.split(":")
+                account_text.insert("1.0", data_split[0])
+                hashtag_text.insert("1.0", data_split[1])
+                message_text.insert("1.0", data_split[2])
+                saved_file.close()
+
             start_direct_bot_button.bind("<Button-1>", start_direct_bot)
+            save_direct_option_button.bind("<Button-1>", save_direct_options)
+            upload_direct_option_button.bind("<Button-1>", upload_direct_options)
 
         def like_dislike(event):
 
@@ -693,10 +771,6 @@
             start_likes_bot_button = Button(like_dislike_frame, text="Start", command="set")
             start_likes_bot_button.place(x=100, y=0, height=50, width=100)
 
-            # Save likes option button
-            save_likes_options_button = Button(like_dislike_frame, text="Save", command="set")
-            save_likes_options_button.place(x=200, y=0, height=50, width=100)
-
             hashtag = IntVar()
             location_check = IntVar()
             account = IntVar()
@@ -787,6 +861,37 @@
 
             location_text['yscrollcommand'] = location_scrollbar.set
 
+            # Function set to save user options
+            def save_options():
+                saved_file = open("Likes options", "w")
+
+                saved_file.write(hashtag_text.get(1.0, 'end-1c') + ":")
+                saved_file.write(location_text.get(1.0, 'end-1c') + ':')
+                saved_file.write(account_text.get(1.0, 'end-1c') + ':')
+
+                saved_file.close()
+
+            # Function set to save user options
+            def load_options():
+                load_file = open("Likes options", "r")
+
+                data = load_file.read()
+                data_split = data.split(':')
+                hashtag_text.insert('1.0', data_split[0])
+                location_text.insert('1.0', data_split[1])
+                account_text.insert('1.0', data_split[2])
+
+                load_file.close()
+
+            # Save and load likes option button
+            save_likes_options_button = Button(like_dislike_frame, text="Save", command=save_options)
+            save_likes_options_button.place(x=200, y=0, height=50, width=100)
+
+            load_likes_options_button = Button(like_dislike_frame, text='Load', command=load_options)
+            load_likes_options_button.place(x=300, y=0, height=50, width=100)
+
+            # Function set for start bot
+
         def follow(event):
 
             dashboard_frame.place(x=300, y=0, height=0, width=0)
@@ -818,39 +923,17 @@
             save_follower_option_button = Button(follow_frame, text="Save", command="set")
             save_follower_option_button.place(x=200, y=0, height=50, width=100)
 
-            hashtag_check_var = IntVar()
-            location_check_var = IntVar()
-            account_check_var = IntVar()
-
-            def hashtag_options():
-                if hashtag_check_var.get() == 1:
-                    follow_by_hashtag_check_button["bg"] = "green"
-                if hashtag_check_var.get() == 0:
-                    follow_by_hashtag_check_button["bg"] = "grey"
+            upload_follower_option_button = Button(follow_frame, text="Upload", command="set")
+            upload_follower_option_button.place(x=300, y=0, height=50, width=100)
 
-            def location_option():
-                if location_check_var.get() == 1:
-                    follow_by_location_check_button["bg"] = "green"
-                if location_check_var.get() == 0:
-                    follow_by_location_check_button["bg"] = "grey"
+            follow_by_hashtag_label = Label(follow_frame, text="Follow by hashtag:", bg="grey")
+            follow_by_hashtag_label.place(x=0, y=75, width=900)
 
-            def account_options():
-                if account_check_var.get() == 1:
-                    follow_by_account_check_button["bg"] = "green"
-                if account_check_var.get() == 0:
-                    follow_by_account_check_button["bg"] = "grey"
+            follow_by_location_label = Label(follow_frame, text="Follow by location:", bg="grey")
+            follow_by_location_label.place(x=0, y=275, width=900)
 
-            follow_by_hashtag_check_button = Checkbutton(follow_frame, text="Follow by hashtag:", bg="grey",
-                                                         variable=hashtag_check_var, command=hashtag_options)
-            follow_by_hashtag_check_button.place(x=10, y=75, width=900)
-
-            follow_by_location_check_button = Checkbutton(follow_frame, text="Follow by location:", bg="grey",
-                                                          variable=location_check_var, command=location_option)
-            follow_by_location_check_button.place(x=10, y=275, width=900)
-
-            follow_by_account_check_button = Checkbutton(follow_frame, text="Follow by account:", bg="grey",
-                                                         variable=account_check_var, command=account_options)
-            follow_by_account_check_button.place(x=10, y=400, width=900)
+            follow_by_account_label = Label(follow_frame, text="Follow by account:", bg="grey")
+            follow_by_account_label.place(x=0, y=400, width=900)
 
             # Follow by hashtag options
 
@@ -865,18 +948,17 @@
             hashtag_follow_frame.grid_rowconfigure(0, weight=1)
 
             # create the text widget
-            text = Text(hashtag_follow_frame, height=10)
-            text.grid(row=0, column=0, sticky='ew')
+            hashtag_text = Text(hashtag_follow_frame, height=10)
+            hashtag_text.grid(row=0, column=0, sticky='ew')
 
             # create a scrollbar widget and set its command to the text widget
-            scrollbar = Scrollbar(hashtag_follow_frame, orient='vertical', command=text.yview)
+            scrollbar = Scrollbar(hashtag_follow_frame, orient='vertical', command=hashtag_text.yview)
             scrollbar.grid(row=0, column=1, sticky='ns')
 
             #  communicate back to the scrollbar
-            text['yscrollcommand'] = scrollbar.set
+            hashtag_text['yscrollcommand'] = scrollbar.set
 
             # Follow by location option
-
             country_check_var = IntVar()
             region_check_var = IntVar()
             city_check_var = IntVar()
@@ -904,7 +986,7 @@
             location_country_follow_check_button.place(x=70, y=330, width=175)
 
             country = [
-                "-------",
+                "Select country",
                 "Albania",
                 "Andorra",
                 "Armenia",
@@ -953,22 +1035,17 @@
 
             ]  # etc
 
-            variable1 = StringVar(follow_frame)
-            variable1.set(country[0])  # default value
+            country_text = StringVar(follow_frame)
+            country_text.set(country[0])  # default value
 
-            w1 = OptionMenu(follow_frame, variable1, *country)
+            w1 = OptionMenu(follow_frame, country_text, *country)
             w1.place(x=70, y=350, width=175)
-
-            #  communicate back to the scrollbar
-            text['yscrollcommand'] = scrollbar.set
-
             location_region_follow_check_button = Checkbutton(follow_frame, text="Follow by region:", bg="grey",
                                                               variable=region_check_var, command=region_option)
             location_region_follow_check_button.place(x=356, y=330, width=175)
 
             region = [
-                "-------",
-                "Valle d’Aosta",
+                "Select region",
                 "Piemonte",
                 "Liguria",
                 "Lombardia",
@@ -990,24 +1067,20 @@
                 "Sardegna",
             ]  # etc
 
-            variable2 = StringVar(follow_frame)
-            variable2.set(region[0])  # default value
+            region_text = StringVar(follow_frame)
+            region_text.set(region[0])  # default value
 
-            w2 = OptionMenu(follow_frame, variable2, *region)
+            w2 = OptionMenu(follow_frame, region_text, *region)
             w2.place(x=356, y=350, width=175)
 
-            #  communicate back to the scrollbar
-            text['yscrollcommand'] = scrollbar.set
-
             location_city_follow_check_button = Checkbutton(follow_frame, text="Follow by city:", bg="grey",
                                                             variable=city_check_var, command=city_options)
             location_city_follow_check_button.place(x=642, y=330, width=175)
 
             city = [
-                "-------",
+                "Select city",
                 "Bologna",
                 "Ferrara",
-                "Forlì-Cesena",
                 "Modena",
                 "Parma",
                 "Piacenza",
@@ -1016,15 +1089,12 @@
                 "Rimini",
             ]  # etc
 
-            variable3 = StringVar(follow_frame)
-            variable3.set(city[0])  # default value
+            city_text = StringVar(follow_frame)
+            city_text.set(city[0])  # default value
 
-            w3 = OptionMenu(follow_frame, variable3, *city)
+            w3 = OptionMenu(follow_frame, city_text, *city)
             w3.place(x=642, y=350, width=175)
 
-            #  communicate back to the scrollbar
-            text['yscrollcommand'] = scrollbar.set
-
             # Follow by account
 
             account_follow_label = Label(follow_frame, text="Insert account:")
@@ -1038,41 +1108,72 @@
             account_follow_frame.grid_rowconfigure(0, weight=1)
 
             # create the text widget
-            text1 = Text(account_follow_frame, height=10)
-            text1.grid(row=0, column=0, sticky='ew')
+            account_text = Text(account_follow_frame, height=10)
+            account_text.grid(row=0, column=0, sticky='ew')
 
             # create a scrollbar widget and set its command to the text widget
-            scrollbar1 = Scrollbar(account_follow_frame, orient='vertical', command=text1.yview)
+            scrollbar1 = Scrollbar(account_follow_frame, orient='vertical', command=account_text.yview)
             scrollbar1.grid(row=0, column=1, sticky='ns')
 
             #  communicate back to the scrollbar
-            text1['yscrollcommand'] = scrollbar1.set
+            account_text['yscrollcommand'] = scrollbar1.set
 
             def start_follow_bot(event):
-
-                # Follow by hashtag:
-                if hashtag_check_var == 1:
-                    hashtags = text.get(1.0, "end-1c")
+                if hashtag_text != "":
+                    hashtags = hashtag_text.get(1.0, "end-1c")
                     hashtags = hashtags.split(' ')
-                    if hashtags:
-                        t_follow_hashtag = Thread(target=ig_follow_hashtag, args=(hashtags,))
-                        t_follow_hashtag.start()
-                # Follow by location
-                if location_check_var == 1:
-                    locations = variable1
-                    if locations:
-                        t_follow_location = Thread(target=ig_follow_location, args=(locations,))
-                        t_follow_location.start()
-                # Follow by account
-                if account_check_var == 1:
-                    print(account_check_var)
-                    accounts = text1.get(1.0, "end-1c")
+                    t_follow_hashtag = Thread(target=ig_follow_hashtag, args=(hashtags,))
+                    t_follow_hashtag.start()
+
+                if country_check_var:
+                    if country_text != "Select country":
+                        t_follow_country = Thread(target=ig_follow_location, args=(country_text,))
+                        t_follow_country.start()
+
+                if region_check_var:
+                    if region_text != "Select region":
+                        t_follow_region = Thread(target=ig_follow_location, args=(region_text,))
+                        t_follow_region.start()
+
+                if city_check_var:
+                    if city_text != "Select city":
+                        t_follow_city = Thread(target=ig_follow_location, args=(city_text,))
+                        t_follow_city.start()
+
+                if account_text != "":
+                    accounts = account_text.get(1.0, "end-1c")
                     accounts = accounts.split(',')
-                    if accounts:
-                        t_follow_account = Thread(target=ig_follow_account, args=(accounts,))
-                        t_follow_account.start()
+                    t_follow_account = Thread(target=ig_follow_account, args=(accounts,))
+                    t_follow_account.start()
 
+            def save_options(event):
+                dir = r"C:\Users\39377\Desktop\InstaBot\data options\follow_options"
+                saved_file = open(dir, "w")
+
+                saved_file.write(hashtag_text.get(1.0, "end-1c") + ":")
+                saved_file.write(str(country_text.get()) + ":")
+                saved_file.write(str(region_text.get()) + ":")
+                saved_file.write(str(city_text.get()) + ":")
+                saved_file.write(account_text.get(1.0, "end-1c") + ":")
+
+                saved_file.close()
+
+            def upload_options(event):
+                dir = r"C:\Users\39377\Desktop\InstaBot\data options\follow_options"
+                saved_file = open(dir, "r")
+                data = saved_file.read()
+                data_split = data.split()
+                hashtag_text.insert("1.0", data_split[0])
+                country_text.set(data_split[1])
+                region_text.set(data_split[2])
+                city_text.set(data_split[3])
+                account_text.insert("1.0", data_split[4])
+
+                saved_file.close()
+
             start_follower_bot_button.bind("<Button-1>", start_follow_bot)
+            save_follower_option_button.bind("<Button-1>", save_options)
+            upload_follower_option_button.bind("<Button-1>", upload_options)
 
         def dashboard(event):
 
@@ -1080,19 +1181,6 @@
             credential = f.read()
             f.close()
 
-            def getProxies():
-                r = requests.get('https://free-proxy-list.net/')
-                soup = BeautifulSoup(r.content, 'html.parser')
-                table = soup.find('tbody')
-                proxies = []
-                for row in table:
-                    if row.find_all('td')[4].text == 'elite proxy':
-                        proxy = ':'.join([row.find_all('td')[0].text, row.find_all('td')[1].text])
-                        proxies.append(proxy)
-                    else:
-                        pass
-                return proxies
-
             if self.is_login == 1:
                 dashboard_frame.place(x=300, y=0, height=600, width=900)
 
@@ -1131,63 +1219,175 @@
                     self.is_login = 0
                     dashboard(0)
 
+                def set_follower_plot(follower_data):
+
+                    # the figure that will contain the plot
+                    follower_fig = Figure(figsize=(4, 4),
+                                          dpi=100)
+                    # adding the subplot
+                    follower_plot = follower_fig.add_subplot(111)
+                    print(follower_data)
+
+                    # plotting the graph
+                    follower_plot.plot(follower_data)
+                    follower_plot.title.set_text("Follower statistic")
+                    follower_plot.set_xlabel("Data numbers")
+                    follower_plot.set_ylabel("Follower")
+                    # creating the Tkinter canvas
+                    # containing the Matplotlib figure
+                    follower_canvas = FigureCanvasTkAgg(follower_fig,
+                                                        master=dashboard_frame)
+
+                    # placing the canvas on the Tkinter window
+                    follower_canvas.draw()
+                    follower_canvas.get_tk_widget().place(x=100, y=100)
+                    # placing the toolbar on the Tkinter window
+                    follower_canvas.get_tk_widget().place(x=100, y=100)
+
+                def set_like_plot(like_data):
+                    # the figure that will contain the plot
+                    like_fig = Figure(figsize=(4, 4),
+                                      dpi=100)
+                    # adding the subplot
+                    like_plot = like_fig.add_subplot(111)
+                    like_plot.set_ylabel("Like")
+                    like_plot.set_xlabel("Data numbers")
+                    # plotting the graph
+                    like_plot.plot(like_data)
+                    like_plot.title.set_text("Like statistic")
+
+                    # creating the Tkinter canvas
+                    # containing the Matplotlib figure
+                    like_canvas = FigureCanvasTkAgg(like_fig,
+                                                    master=dashboard_frame)
+
+                    # placing the canvas on the Tkinter window
+                    like_canvas.draw()
+                    like_canvas.get_tk_widget().place(x=500, y=100)
+
+                    """creating the Matplotlib toolbar
+                    toolbar = NavigationToolbar2Tk(canvas,
+                                                 dashboard_frame)
+                    toolbar.update()"""
+
+                    # placing the toolbar on the Tkinter window
+                    like_canvas.get_tk_widget().place(x=500, y=100)
+
+                set_follower_plot(0)
+                set_like_plot(0)
+
+                refresh_follow_button = Button(dashboard_frame, text="Refresh follow", command="set")
+                refresh_follow_button.place(x=150, y=400)
+                refresh_like_button = Button(dashboard_frame, text="Refresh like", command="set")
+                refresh_like_button.place(x=550, y=400)
+
+                def get_follower_data(event):
+                    t_follow_number = Thread(target=ig_get_follow_number)
+                    t_follow_number.start()
+                    if not t_follow_number.is_alive():
+                        f_name = r"/Users/fabiodonello/Desktop/Esame OOP/InstgramBot_2/config/data/followed_data.txt"
+                        f1 = open(f_name, "r")
+                        follower_data = f1.read()
+                        follower_data = follower_data.split(':')
+                        f1.close()
+                        follower_data.remove("")
+                        follower_int_data = [int(i) for i in follower_data]
+                        set_follower_plot(follower_int_data)
+
+                def get_like_data(event):
+                    t_like_number = Thread(target=ig_get_like_number())
+                    t_like_number.start()
+                    if not t_like_number.is_alive():
+                        f_name = r"/Users/fabiodonello/Desktop/Esame OOP/InstgramBot_2/config/data/like_data.txt"
+                        f2 = open(f_name, "r")
+                        like_data = f2.read()
+                        like_data = like_data.split(':')
+                        f2.close()
+                        like_data.remove("")
+                        like_int_data = [int(i) for i in like_data]
+                        set_like_plot(like_int_data)
+
                 logout_button.bind("<Button-1>", logout)
+                refresh_follow_button.bind("<Button-1>", get_follower_data)
+                refresh_like_button.bind("<Button-1>", get_like_data)
 
             else:
-                # Login with ig credential in a file
-                dashboard_frame.place(x=300, y=0, height=0, width=0)
-                # Create instagram login frame
-                instagram_background_login_frame = Frame(self.root, bd=5, bg="white")
-                instagram_background_login_frame.place(x=300, y=0, height=600, width=900)
+
+                if credential != "":
+                    print("ho le credenziali")
+
+                    # Login with ig credential in a file
+                    dashboard_frame.place(x=300, y=0, height=0, width=0)
+                    # Create instagram login frame
+                    instagram_background_login_frame = Frame(self.root, bd=5, bg="white")
+                    instagram_background_login_frame.place(x=300, y=0, height=600, width=900)
 
-                # Set title of login frame
-                instagram_login_frame_title = Label(instagram_background_login_frame,
-                                                    text="Login in corso:",
-                                                    bg="white")
-                instagram_login_frame_title.place(x=400, y=250)
+                    # Set title of login frame
+                    instagram_login_frame_title = Label(instagram_background_login_frame,
+                                                        text="Login in corso:",
+                                                        bg="white")
+                    instagram_login_frame_title.place(x=400, y=250)
 
-                background_progress = ttk.Progressbar(instagram_background_login_frame, orient=HORIZONTAL,
-                                                      length=100, mode='determinate', )
-                background_progress.place(x=400, y=275)
-                background_progress['value'] = 0
+                    background_progress = ttk.Progressbar(instagram_background_login_frame, orient=HORIZONTAL,
+                                                          length=100, mode='determinate', )
+                    background_progress.place(x=400, y=275)
+                    background_progress['value'] = 0
 
-                def progress_control():
-                    for a in range(100):
-                        background_progress['value'] = a
-                        time.sleep(0.01)
-                    ig_background_login_check()
+                    def progress_control():
+                        for val in range(100):
+                            background_progress['value'] = val
+                            time.sleep(0.1)
+                        ig_background_login_check()
 
-                t_bk_pb = Thread(target=progress_control)
-                t_bk_pb.start()
-                var1 = 0
-                proxy_list1 = getProxies()
-                t1_bk_login = Thread(target=ig_login, args=(proxy_list1, "", "", var1))
-                t1_bk_login.start()
+                    t_bk_pb = Thread(target=progress_control)
+                    t_bk_pb.start()
+                    t1_bk_login = Thread(target=ig_login, args=("", "", 0))
+                    t1_bk_login.start()
 
-                def ig_background_login_check():
-                    background_progress.destroy()
-                    log_file_str = os.listdir(
-                        r"C:\Users\39377\Desktop\InstaBot\config\log")
-                    log_file = open(r"C:\Users\39377\Desktop\InstaBot\config\log\\"
-                                    + log_file_str[0], "r")
-                    ll = StringVar
-                    for last_line in log_file:
-                        ll = last_line
-                        pass
-                    if "Username or password is incorrect" in ll:
-                        messagebox.showinfo("Login fail", "Username or password wrong")
-                        dashboard(0)
-                    if "too many requests" in ll:
-                        messagebox.showinfo("Login fail", "To many request from instagram, wait 5 minutes")
-                        dashboard(0)
-                    self.is_login = 1
-                    instagram_background_login_frame.destroy()
-                    dashboard(0)
+                    def ig_background_login_check():
+                        last_message = bot.api.last_response
+                        if last_message:
+                            if "Username or password is incorrect" in last_message:
+                                instagram_background_login_frame.destroy()
+                                messagebox.showinfo("Login fail", "Username or password wrong")
+                                dashboard(0)
+                            if "429" in last_message:
+                                messagebox.showinfo("Login fail", "To many request from instagram, wait 5 minutes")
+
+                                def progress_wait_control():
+
+                                    instagram_wait_label = Label(instagram_background_login_frame,
+                                                                 text="Aspetto 5 minuti:",
+                                                                 bg="white")
+                                    instagram_wait_label.place(x=400, y=250)
+
+                                    background_wait = ttk.Progressbar(instagram_background_login_frame,
+                                                                      orient=HORIZONTAL,
+                                                                      length=100, mode='determinate', )
+                                    background_wait.place(x=400, y=275)
+                                    background_wait['value'] = 0
+
+                                    for a in range(100):
+                                        background_wait['value'] = a
+                                        time.sleep(0.1)
+                                    instagram_background_login_frame.destroy()
+                                    dashboard(0)
+
+                                progress_wait_control()
+
+                        # self.is_login = is_login()
+                        self.is_login = True
+                        if self.is_login == True:
+                            instagram_background_login_frame.destroy()
+                            dashboard(0)
+                        else:
+                            messagebox.showinfo("Login fail", "Something wrong")
+                            dashboard(0)
 
                 # ----------------------------------------------------------------------------------------------------
                 # Login with a request of ig credential
                 if credential == "":
-                    print("maaaa")
+                    print("non ho le credenziali")
                     dashboard_frame.place(x=300, y=0, height=0, width=0)
                     # Create instagram login frame
                     instagram_login_frame = Frame(self.root, bd=5, bg="white")
@@ -1195,9 +1395,7 @@
 
                     # Set title of login frame
                     instagram_login_frame_title = Label(instagram_login_frame,
-                                                        text="Prima di accedere alle funzionalità "
-                                                             "di giudoinstabot accedi al profilo"
-                                                             " instagram che vuoi gestire: ",
+                                                        text="Hello",
                                                         bg="white")
                     instagram_login_frame_title.place(x=0, y=30)
 
@@ -1235,7 +1433,6 @@
                         print(username_text)
                         print(password_text)
                         if username_text and password_text:
-                            proxy_list1 = getProxies()
                             instagram_access_button.destroy()
                             instagram_info_label = Label(instagram_login_frame, text="Login in process: ",
                                                          bg="white")
@@ -1253,32 +1450,28 @@
 
                             t_pb = Thread(target=progress_control)
                             t_pb.start()
-                            var1 = 1
 
-                            t1_login = Thread(target=ig_login,
-                                              args=(proxy_list1, username_text, password_text, var1))
+                            t1_login = Thread(target=ig_login, args=(username_text, password_text, 1))
                             t1_login.start()
 
                             def ig_login_check():
-                                progress.destroy()
-                                log_file_str = os.listdir(
-                                    r"C:\Users\39377\Desktop\InstaBot\config\log")
-                                log_file = open(r"C:\Users\39377\Desktop\InstaBot\config\log\\"
-                                                + log_file_str[0], "r")
-                                ll = StringVar
-                                for last_line in log_file:
-                                    ll = last_line
-                                    pass
-                                if "Username or password is incorrect" in ll:
-                                    messagebox.showinfo("Login fail", "Username or password wrong")
-                                    dashboard(0)
-                                if "too many requests" in ll:
-                                    messagebox.showinfo("Login fail",
-                                                        "To many request from instagram, wait 5 minutes")
-                                    dashboard(0)
-                                self.is_login = 1
-                                instagram_login_frame.destroy()
-                                dashboard(0)
+                                last_message = bot.api.last_response
+                                if last_message:
+                                    if "Username or password is incorrect" in last_message:
+                                        messagebox.showinfo("Login fail", "Username or password wrong")
+                                        dashboard(0)
+                                    if "429" in last_message:
+                                        messagebox.showinfo("Login fail",
+                                                            "To many request from instagram, wait 5 minutes")
+                                        dashboard(0)
+
+                                self.is_login = is_login()
+                                if self.is_login == True:
+                                    instagram_login_frame.destroy()
+                                    dashboard(0)
+                                else:
+                                    messagebox.showinfo("Login fail", "Something wrong")
+                                    dashboard(0)
 
                     instagram_access_button.bind("<Button-1>", access_try)
 
